2023-12-06 23:07:32,569:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:07:32,569:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:07:32,569:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:07:32,569:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:07:32,761:INFO:Initializing load_model()
2023-12-06 23:07:32,761:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:10:01,012:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:10:01,017:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:10:01,017:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:10:01,017:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:10:01,147:INFO:Initializing load_model()
2023-12-06 23:10:01,147:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:10:07,490:INFO:Initializing predict_model()
2023-12-06 23:10:07,490:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002D6EFCF8340>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002D6EFCE89D0>)
2023-12-06 23:10:07,490:INFO:Checking exceptions
2023-12-06 23:10:07,490:INFO:Preloading libraries
2023-12-06 23:10:07,491:INFO:Set up data.
2023-12-06 23:10:07,495:INFO:Set up index.
2023-12-06 23:12:37,386:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:12:37,386:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:12:37,386:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:12:37,386:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:12:37,517:INFO:Initializing load_model()
2023-12-06 23:12:37,517:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:12:41,847:INFO:Initializing predict_model()
2023-12-06 23:12:41,847:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FA16338310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FA163289D0>)
2023-12-06 23:12:41,847:INFO:Checking exceptions
2023-12-06 23:12:41,847:INFO:Preloading libraries
2023-12-06 23:12:41,848:INFO:Set up data.
2023-12-06 23:12:41,850:INFO:Set up index.
2023-12-06 23:43:15,952:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:43:15,957:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:43:15,957:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:43:15,957:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:43:16,162:INFO:Initializing load_model()
2023-12-06 23:43:16,167:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:43:20,114:INFO:Initializing predict_model()
2023-12-06 23:43:20,115:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026C25697310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026C256879D0>)
2023-12-06 23:43:20,115:INFO:Checking exceptions
2023-12-06 23:43:20,115:INFO:Preloading libraries
2023-12-06 23:43:20,115:INFO:Set up data.
2023-12-06 23:43:20,121:INFO:Set up index.
2023-12-06 23:44:18,562:INFO:Initializing predict_model()
2023-12-06 23:44:18,562:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026C256FA8E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026C2592FF70>)
2023-12-06 23:44:18,562:INFO:Checking exceptions
2023-12-06 23:44:18,562:INFO:Preloading libraries
2023-12-06 23:44:18,562:INFO:Set up data.
2023-12-06 23:44:18,570:INFO:Set up index.
2023-12-06 23:46:14,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:46:14,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:46:14,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:46:14,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:46:14,229:INFO:Initializing load_model()
2023-12-06 23:46:14,229:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:46:17,220:INFO:Initializing predict_model()
2023-12-06 23:46:17,220:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D9E7948310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D9E79389D0>)
2023-12-06 23:46:17,220:INFO:Checking exceptions
2023-12-06 23:46:17,220:INFO:Preloading libraries
2023-12-06 23:46:17,221:INFO:Set up data.
2023-12-06 23:46:17,227:INFO:Set up index.
2023-12-06 23:48:13,445:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:48:13,445:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:48:13,445:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:48:13,445:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:48:13,575:INFO:Initializing load_model()
2023-12-06 23:48:13,575:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:48:18,464:INFO:Initializing predict_model()
2023-12-06 23:48:18,464:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023D57988310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023D579789D0>)
2023-12-06 23:48:18,464:INFO:Checking exceptions
2023-12-06 23:48:18,464:INFO:Preloading libraries
2023-12-06 23:48:18,465:INFO:Set up data.
2023-12-06 23:48:18,471:INFO:Set up index.
2023-12-06 23:48:52,103:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:48:52,103:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:48:52,103:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:48:52,104:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:48:52,293:INFO:Initializing load_model()
2023-12-06 23:48:52,293:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:48:55,101:INFO:Initializing predict_model()
2023-12-06 23:48:55,101:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020B505F8340>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020B505E89D0>)
2023-12-06 23:48:55,101:INFO:Checking exceptions
2023-12-06 23:48:55,101:INFO:Preloading libraries
2023-12-06 23:48:55,102:INFO:Set up data.
2023-12-06 23:48:55,108:INFO:Set up index.
2023-12-06 23:50:02,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:50:02,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:50:02,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:50:02,689:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:50:02,819:INFO:Initializing load_model()
2023-12-06 23:50:02,819:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:50:06,975:INFO:Initializing predict_model()
2023-12-06 23:50:06,975:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000221809B8340>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000221809A89D0>)
2023-12-06 23:50:06,975:INFO:Checking exceptions
2023-12-06 23:50:06,976:INFO:Preloading libraries
2023-12-06 23:50:06,976:INFO:Set up data.
2023-12-06 23:50:06,984:INFO:Set up index.
2023-12-06 23:51:04,323:INFO:Initializing predict_model()
2023-12-06 23:51:04,323:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022180A1B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022180AD7310>)
2023-12-06 23:51:04,323:INFO:Checking exceptions
2023-12-06 23:51:04,323:INFO:Preloading libraries
2023-12-06 23:51:04,323:INFO:Set up data.
2023-12-06 23:51:04,328:INFO:Set up index.
2023-12-06 23:51:15,712:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:51:15,712:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:51:15,712:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:51:15,712:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:51:15,889:INFO:Initializing load_model()
2023-12-06 23:51:15,889:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:51:17,596:INFO:Initializing predict_model()
2023-12-06 23:51:17,596:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024ADE548310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000024ADE5389D0>)
2023-12-06 23:51:17,597:INFO:Checking exceptions
2023-12-06 23:51:17,597:INFO:Preloading libraries
2023-12-06 23:51:17,597:INFO:Set up data.
2023-12-06 23:51:17,607:INFO:Set up index.
2023-12-06 23:52:53,139:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:52:53,139:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:52:53,139:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:52:53,139:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:52:53,274:INFO:Initializing load_model()
2023-12-06 23:52:53,274:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:52:57,955:INFO:Initializing predict_model()
2023-12-06 23:52:57,956:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B114D68310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B114D589D0>)
2023-12-06 23:52:57,956:INFO:Checking exceptions
2023-12-06 23:52:57,956:INFO:Preloading libraries
2023-12-06 23:52:57,957:INFO:Set up data.
2023-12-06 23:52:57,964:INFO:Set up index.
2023-12-06 23:54:45,164:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:54:45,164:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:54:45,164:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:54:45,169:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-06 23:54:45,309:INFO:Initializing load_model()
2023-12-06 23:54:45,309:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-06 23:54:49,892:INFO:Initializing predict_model()
2023-12-06 23:54:49,892:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227FAE48370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227FAE389D0>)
2023-12-06 23:54:49,892:INFO:Checking exceptions
2023-12-06 23:54:49,892:INFO:Preloading libraries
2023-12-06 23:54:49,893:INFO:Set up data.
2023-12-06 23:54:49,900:INFO:Set up index.
2023-12-07 00:00:10,928:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:00:10,928:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:00:10,928:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:00:10,928:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:00:11,063:INFO:Initializing load_model()
2023-12-07 00:00:11,063:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:00:16,061:INFO:Initializing predict_model()
2023-12-07 00:00:16,061:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021476128310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000214761189D0>)
2023-12-07 00:00:16,061:INFO:Checking exceptions
2023-12-07 00:00:16,061:INFO:Preloading libraries
2023-12-07 00:00:16,062:INFO:Set up data.
2023-12-07 00:00:16,068:INFO:Set up index.
2023-12-07 00:00:39,922:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:00:39,922:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:00:39,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:00:39,927:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:00:40,082:INFO:Initializing load_model()
2023-12-07 00:00:40,082:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:00:42,499:INFO:Initializing predict_model()
2023-12-07 00:00:42,499:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A4E2E8340>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A4E2D89D0>)
2023-12-07 00:00:42,499:INFO:Checking exceptions
2023-12-07 00:00:42,499:INFO:Preloading libraries
2023-12-07 00:00:42,499:INFO:Set up data.
2023-12-07 00:00:42,506:INFO:Set up index.
2023-12-07 00:09:45,169:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:09:45,169:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:09:45,169:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:09:45,169:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:09:45,318:INFO:Initializing load_model()
2023-12-07 00:09:45,318:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:09:50,147:INFO:Initializing predict_model()
2023-12-07 00:09:50,148:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000018CA9008310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000018CA8FF8AF0>)
2023-12-07 00:09:50,148:INFO:Checking exceptions
2023-12-07 00:09:50,148:INFO:Preloading libraries
2023-12-07 00:09:50,148:INFO:Set up data.
2023-12-07 00:09:50,154:INFO:Set up index.
2023-12-07 00:10:27,374:INFO:Initializing predict_model()
2023-12-07 00:10:27,375:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000018C9ED73520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000018CA8FF8AF0>)
2023-12-07 00:10:27,375:INFO:Checking exceptions
2023-12-07 00:10:27,375:INFO:Preloading libraries
2023-12-07 00:10:27,375:INFO:Set up data.
2023-12-07 00:10:27,386:INFO:Set up index.
2023-12-07 00:12:22,590:INFO:Initializing predict_model()
2023-12-07 00:12:22,590:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000018CA9008430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000018CA8FF88B0>)
2023-12-07 00:12:22,590:INFO:Checking exceptions
2023-12-07 00:12:22,590:INFO:Preloading libraries
2023-12-07 00:12:22,590:INFO:Set up data.
2023-12-07 00:12:22,597:INFO:Set up index.
2023-12-07 00:13:39,126:INFO:Initializing predict_model()
2023-12-07 00:13:39,126:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000018C9ED73520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000018CA8FF8B80>)
2023-12-07 00:13:39,127:INFO:Checking exceptions
2023-12-07 00:13:39,127:INFO:Preloading libraries
2023-12-07 00:13:39,128:INFO:Set up data.
2023-12-07 00:13:39,137:INFO:Set up index.
2023-12-07 00:14:16,919:INFO:Initializing predict_model()
2023-12-07 00:14:16,919:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000018CA8FDC760>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000018CA8FF8820>)
2023-12-07 00:14:16,920:INFO:Checking exceptions
2023-12-07 00:14:16,920:INFO:Preloading libraries
2023-12-07 00:14:16,920:INFO:Set up data.
2023-12-07 00:14:16,929:INFO:Set up index.
2023-12-07 00:15:21,246:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:15:21,251:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:15:21,251:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:15:21,251:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:15:21,416:INFO:Initializing load_model()
2023-12-07 00:15:21,416:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:15:23,865:INFO:Initializing predict_model()
2023-12-07 00:15:23,865:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021F92D98310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021F92D88AF0>)
2023-12-07 00:15:23,865:INFO:Checking exceptions
2023-12-07 00:15:23,865:INFO:Preloading libraries
2023-12-07 00:15:23,866:INFO:Set up data.
2023-12-07 00:15:23,872:INFO:Set up index.
2023-12-07 00:16:21,721:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:16:21,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:16:21,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:16:21,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:16:21,916:INFO:Initializing load_model()
2023-12-07 00:16:21,916:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:16:26,451:INFO:Initializing predict_model()
2023-12-07 00:16:26,452:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000017C62D38310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017C62D28AF0>)
2023-12-07 00:16:26,452:INFO:Checking exceptions
2023-12-07 00:16:26,452:INFO:Preloading libraries
2023-12-07 00:16:26,452:INFO:Set up data.
2023-12-07 00:16:26,460:INFO:Set up index.
2023-12-07 00:33:57,758:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:33:57,758:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:33:57,758:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:33:57,758:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:33:57,883:INFO:Initializing load_model()
2023-12-07 00:33:57,883:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:34:14,525:INFO:Initializing predict_model()
2023-12-07 00:34:14,525:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002411B2C3520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002411B2B7CA0>)
2023-12-07 00:34:14,525:INFO:Checking exceptions
2023-12-07 00:34:14,525:INFO:Preloading libraries
2023-12-07 00:34:14,525:INFO:Set up data.
2023-12-07 00:34:14,528:INFO:Set up index.
2023-12-07 00:35:25,736:INFO:Initializing predict_model()
2023-12-07 00:35:25,737:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002411B2C3EE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002411B2B7D30>)
2023-12-07 00:35:25,737:INFO:Checking exceptions
2023-12-07 00:35:25,737:INFO:Preloading libraries
2023-12-07 00:35:25,737:INFO:Set up data.
2023-12-07 00:35:25,744:INFO:Set up index.
2023-12-07 00:35:25,980:INFO:Initializing predict_model()
2023-12-07 00:35:25,980:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000024111063E80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000024114203790>)
2023-12-07 00:35:25,980:INFO:Checking exceptions
2023-12-07 00:35:25,980:INFO:Preloading libraries
2023-12-07 00:35:25,981:INFO:Set up data.
2023-12-07 00:35:25,986:INFO:Set up index.
2023-12-07 00:35:26,215:INFO:Initializing predict_model()
2023-12-07 00:35:26,215:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002411B29D160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000024114203820>)
2023-12-07 00:35:26,215:INFO:Checking exceptions
2023-12-07 00:35:26,215:INFO:Preloading libraries
2023-12-07 00:35:26,216:INFO:Set up data.
2023-12-07 00:35:26,221:INFO:Set up index.
2023-12-07 00:35:43,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:35:43,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:35:43,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:35:43,726:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:35:43,856:INFO:Initializing load_model()
2023-12-07 00:35:43,856:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:35:51,173:INFO:Initializing predict_model()
2023-12-07 00:35:51,174:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CF25563520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CF25556CA0>)
2023-12-07 00:35:51,174:INFO:Checking exceptions
2023-12-07 00:35:51,174:INFO:Preloading libraries
2023-12-07 00:35:51,174:INFO:Set up data.
2023-12-07 00:35:51,180:INFO:Set up index.
2023-12-07 00:35:51,413:INFO:Initializing predict_model()
2023-12-07 00:35:51,413:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CF2553D6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CF1E4B3790>)
2023-12-07 00:35:51,413:INFO:Checking exceptions
2023-12-07 00:35:51,413:INFO:Preloading libraries
2023-12-07 00:35:51,413:INFO:Set up data.
2023-12-07 00:35:51,420:INFO:Set up index.
2023-12-07 00:35:51,660:INFO:Initializing predict_model()
2023-12-07 00:35:51,660:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CF24D806D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CF1E4B3820>)
2023-12-07 00:35:51,660:INFO:Checking exceptions
2023-12-07 00:35:51,660:INFO:Preloading libraries
2023-12-07 00:35:51,660:INFO:Set up data.
2023-12-07 00:35:51,666:INFO:Set up index.
2023-12-07 00:39:55,111:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:39:55,111:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:39:55,111:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:39:55,111:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:39:55,241:INFO:Initializing load_model()
2023-12-07 00:39:55,241:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:39:55,291:INFO:Initializing load_model()
2023-12-07 00:39:55,291:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-07 00:39:55,337:INFO:Initializing load_model()
2023-12-07 00:39:55,337:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-07 00:40:07,699:INFO:Initializing predict_model()
2023-12-07 00:40:07,699:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000250664B26A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000250664B33A0>)
2023-12-07 00:40:07,699:INFO:Checking exceptions
2023-12-07 00:40:07,699:INFO:Preloading libraries
2023-12-07 00:40:07,700:INFO:Set up data.
2023-12-07 00:40:07,707:INFO:Set up index.
2023-12-07 00:40:07,951:INFO:Initializing predict_model()
2023-12-07 00:40:07,951:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000250651592B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002505E684790>)
2023-12-07 00:40:07,951:INFO:Checking exceptions
2023-12-07 00:40:07,951:INFO:Preloading libraries
2023-12-07 00:40:07,951:INFO:Set up data.
2023-12-07 00:40:07,958:INFO:Set up index.
2023-12-07 00:40:08,199:INFO:Initializing predict_model()
2023-12-07 00:40:08,199:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002506571D160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002505E684820>)
2023-12-07 00:40:08,199:INFO:Checking exceptions
2023-12-07 00:40:08,199:INFO:Preloading libraries
2023-12-07 00:40:08,200:INFO:Set up data.
2023-12-07 00:40:08,205:INFO:Set up index.
2023-12-07 00:40:15,402:INFO:Initializing predict_model()
2023-12-07 00:40:15,402:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002505E6819D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000250664B33A0>)
2023-12-07 00:40:15,402:INFO:Checking exceptions
2023-12-07 00:40:15,402:INFO:Preloading libraries
2023-12-07 00:40:15,402:INFO:Set up data.
2023-12-07 00:40:15,408:INFO:Set up index.
2023-12-07 00:40:15,644:INFO:Initializing predict_model()
2023-12-07 00:40:15,644:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002505EA3E850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000250664B3DC0>)
2023-12-07 00:40:15,644:INFO:Checking exceptions
2023-12-07 00:40:15,644:INFO:Preloading libraries
2023-12-07 00:40:15,644:INFO:Set up data.
2023-12-07 00:40:15,651:INFO:Set up index.
2023-12-07 00:40:15,915:INFO:Initializing predict_model()
2023-12-07 00:40:15,915:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002505B4D4520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000250664B30D0>)
2023-12-07 00:40:15,915:INFO:Checking exceptions
2023-12-07 00:40:15,915:INFO:Preloading libraries
2023-12-07 00:40:15,916:INFO:Set up data.
2023-12-07 00:40:15,922:INFO:Set up index.
2023-12-07 00:40:20,494:INFO:Initializing predict_model()
2023-12-07 00:40:20,495:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025065159370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000250664B3DC0>)
2023-12-07 00:40:20,495:INFO:Checking exceptions
2023-12-07 00:40:20,495:INFO:Preloading libraries
2023-12-07 00:40:20,495:INFO:Set up data.
2023-12-07 00:40:20,501:INFO:Set up index.
2023-12-07 00:40:20,763:INFO:Initializing predict_model()
2023-12-07 00:40:20,764:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002505B4D4520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000250664B3F70>)
2023-12-07 00:40:20,764:INFO:Checking exceptions
2023-12-07 00:40:20,764:INFO:Preloading libraries
2023-12-07 00:40:20,764:INFO:Set up data.
2023-12-07 00:40:20,777:INFO:Set up index.
2023-12-07 00:40:21,080:INFO:Initializing predict_model()
2023-12-07 00:40:21,080:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000250651595B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000250664B3E50>)
2023-12-07 00:40:21,081:INFO:Checking exceptions
2023-12-07 00:40:21,081:INFO:Preloading libraries
2023-12-07 00:40:21,081:INFO:Set up data.
2023-12-07 00:40:21,088:INFO:Set up index.
2023-12-07 00:40:28,632:INFO:Initializing predict_model()
2023-12-07 00:40:28,632:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000250651592B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000250664B3F70>)
2023-12-07 00:40:28,632:INFO:Checking exceptions
2023-12-07 00:40:28,632:INFO:Preloading libraries
2023-12-07 00:40:28,633:INFO:Set up data.
2023-12-07 00:40:28,638:INFO:Set up index.
2023-12-07 00:40:34,883:INFO:Initializing predict_model()
2023-12-07 00:40:34,884:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002505E681A30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000250664B33A0>)
2023-12-07 00:40:34,884:INFO:Checking exceptions
2023-12-07 00:40:34,884:INFO:Preloading libraries
2023-12-07 00:40:34,885:INFO:Set up data.
2023-12-07 00:40:34,891:INFO:Set up index.
2023-12-07 00:40:39,954:INFO:Initializing predict_model()
2023-12-07 00:40:39,954:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002506571D160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000250664B31F0>)
2023-12-07 00:40:39,954:INFO:Checking exceptions
2023-12-07 00:40:39,954:INFO:Preloading libraries
2023-12-07 00:40:39,954:INFO:Set up data.
2023-12-07 00:40:39,961:INFO:Set up index.
2023-12-07 00:42:10,050:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:42:10,050:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:42:10,050:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:42:10,050:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:42:10,185:INFO:Initializing load_model()
2023-12-07 00:42:10,185:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:42:10,234:INFO:Initializing load_model()
2023-12-07 00:42:10,234:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-07 00:42:10,274:INFO:Initializing load_model()
2023-12-07 00:42:10,274:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-07 00:42:22,828:INFO:Initializing predict_model()
2023-12-07 00:42:22,828:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001F898C52640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F898C533A0>)
2023-12-07 00:42:22,828:INFO:Checking exceptions
2023-12-07 00:42:22,828:INFO:Preloading libraries
2023-12-07 00:42:22,828:INFO:Set up data.
2023-12-07 00:42:22,834:INFO:Set up index.
2023-12-07 00:45:13,261:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:45:13,266:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:45:13,266:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:45:13,266:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:45:13,401:INFO:Initializing load_model()
2023-12-07 00:45:13,401:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:45:13,459:INFO:Initializing load_model()
2023-12-07 00:45:13,459:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-07 00:45:13,497:INFO:Initializing load_model()
2023-12-07 00:45:13,498:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-07 00:45:15,052:INFO:Initializing predict_model()
2023-12-07 00:45:15,052:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B64F572640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56B4C0>)
2023-12-07 00:45:15,052:INFO:Checking exceptions
2023-12-07 00:45:15,052:INFO:Preloading libraries
2023-12-07 00:45:15,052:INFO:Set up data.
2023-12-07 00:45:15,059:INFO:Set up index.
2023-12-07 00:45:21,103:INFO:Initializing predict_model()
2023-12-07 00:45:21,103:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B6477429A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56B4C0>)
2023-12-07 00:45:21,103:INFO:Checking exceptions
2023-12-07 00:45:21,103:INFO:Preloading libraries
2023-12-07 00:45:21,104:INFO:Set up data.
2023-12-07 00:45:21,110:INFO:Set up index.
2023-12-07 00:45:26,031:INFO:Initializing predict_model()
2023-12-07 00:45:26,031:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B644594520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56B280>)
2023-12-07 00:45:26,031:INFO:Checking exceptions
2023-12-07 00:45:26,031:INFO:Preloading libraries
2023-12-07 00:45:26,032:INFO:Set up data.
2023-12-07 00:45:26,039:INFO:Set up index.
2023-12-07 00:45:26,277:INFO:Initializing predict_model()
2023-12-07 00:45:26,277:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B64E2194C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56B550>)
2023-12-07 00:45:26,277:INFO:Checking exceptions
2023-12-07 00:45:26,277:INFO:Preloading libraries
2023-12-07 00:45:26,277:INFO:Set up data.
2023-12-07 00:45:26,283:INFO:Set up index.
2023-12-07 00:45:26,554:INFO:Initializing predict_model()
2023-12-07 00:45:26,554:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B64E219310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56BF70>)
2023-12-07 00:45:26,554:INFO:Checking exceptions
2023-12-07 00:45:26,554:INFO:Preloading libraries
2023-12-07 00:45:26,554:INFO:Set up data.
2023-12-07 00:45:26,563:INFO:Set up index.
2023-12-07 00:45:30,503:INFO:Initializing predict_model()
2023-12-07 00:45:30,504:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B64E219370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56B1F0>)
2023-12-07 00:45:30,504:INFO:Checking exceptions
2023-12-07 00:45:30,504:INFO:Preloading libraries
2023-12-07 00:45:30,504:INFO:Set up data.
2023-12-07 00:45:30,509:INFO:Set up index.
2023-12-07 00:45:30,736:INFO:Initializing predict_model()
2023-12-07 00:45:30,736:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B647742A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56B550>)
2023-12-07 00:45:30,736:INFO:Checking exceptions
2023-12-07 00:45:30,736:INFO:Preloading libraries
2023-12-07 00:45:30,736:INFO:Set up data.
2023-12-07 00:45:30,742:INFO:Set up index.
2023-12-07 00:45:31,003:INFO:Initializing predict_model()
2023-12-07 00:45:31,004:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B64E2194C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56BF70>)
2023-12-07 00:45:31,004:INFO:Checking exceptions
2023-12-07 00:45:31,004:INFO:Preloading libraries
2023-12-07 00:45:31,004:INFO:Set up data.
2023-12-07 00:45:31,009:INFO:Set up index.
2023-12-07 00:45:49,218:INFO:Initializing predict_model()
2023-12-07 00:45:49,218:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B647742A30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56BEE0>)
2023-12-07 00:45:49,218:INFO:Checking exceptions
2023-12-07 00:45:49,219:INFO:Preloading libraries
2023-12-07 00:45:49,219:INFO:Set up data.
2023-12-07 00:45:49,225:INFO:Set up index.
2023-12-07 00:45:55,582:INFO:Initializing predict_model()
2023-12-07 00:45:55,583:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B6477429A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56B550>)
2023-12-07 00:45:55,583:INFO:Checking exceptions
2023-12-07 00:45:55,583:INFO:Preloading libraries
2023-12-07 00:45:55,583:INFO:Set up data.
2023-12-07 00:45:55,595:INFO:Set up index.
2023-12-07 00:45:59,798:INFO:Initializing predict_model()
2023-12-07 00:45:59,798:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001B64E7DD190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001B64F56B280>)
2023-12-07 00:45:59,798:INFO:Checking exceptions
2023-12-07 00:45:59,798:INFO:Preloading libraries
2023-12-07 00:45:59,799:INFO:Set up data.
2023-12-07 00:45:59,804:INFO:Set up index.
2023-12-07 00:46:57,836:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:46:57,836:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:46:57,836:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:46:57,836:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 00:46:58,021:INFO:Initializing load_model()
2023-12-07 00:46:58,021:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 00:46:58,095:INFO:Initializing load_model()
2023-12-07 00:46:58,095:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-07 00:46:58,140:INFO:Initializing load_model()
2023-12-07 00:46:58,140:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-07 00:47:03,301:INFO:Initializing predict_model()
2023-12-07 00:47:03,301:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001899C922640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001899C91A4C0>)
2023-12-07 00:47:03,301:INFO:Checking exceptions
2023-12-07 00:47:03,301:INFO:Preloading libraries
2023-12-07 00:47:03,301:INFO:Set up data.
2023-12-07 00:47:03,309:INFO:Set up index.
2023-12-07 00:47:14,712:INFO:Initializing predict_model()
2023-12-07 00:47:14,712:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000018994AF1910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001899C91A4C0>)
2023-12-07 00:47:14,712:INFO:Checking exceptions
2023-12-07 00:47:14,712:INFO:Preloading libraries
2023-12-07 00:47:14,712:INFO:Set up data.
2023-12-07 00:47:14,720:INFO:Set up index.
2023-12-07 00:47:20,861:INFO:Initializing predict_model()
2023-12-07 00:47:20,861:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001899194F1C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001899C91A280>)
2023-12-07 00:47:20,861:INFO:Checking exceptions
2023-12-07 00:47:20,861:INFO:Preloading libraries
2023-12-07 00:47:20,861:INFO:Set up data.
2023-12-07 00:47:20,867:INFO:Set up index.
2023-12-07 20:25:30,270:INFO:Initializing predict_model()
2023-12-07 20:25:30,274:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001899B5B94C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001899C91A550>)
2023-12-07 20:25:30,274:INFO:Checking exceptions
2023-12-07 20:25:30,274:INFO:Preloading libraries
2023-12-07 20:25:30,297:INFO:Set up data.
2023-12-07 20:25:30,353:INFO:Set up index.
2023-12-07 20:25:52,045:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 20:25:52,045:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 20:25:52,045:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 20:25:52,045:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-07 20:25:52,294:INFO:Initializing load_model()
2023-12-07 20:25:52,294:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-07 20:25:52,406:INFO:Initializing load_model()
2023-12-07 20:25:52,406:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-07 20:25:52,451:INFO:Initializing load_model()
2023-12-07 20:25:52,451:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-07 20:25:56,012:INFO:Initializing predict_model()
2023-12-07 20:25:56,012:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001ACC1951640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001ACC1953310>)
2023-12-07 20:25:56,012:INFO:Checking exceptions
2023-12-07 20:25:56,012:INFO:Preloading libraries
2023-12-07 20:25:56,013:INFO:Set up data.
2023-12-07 20:25:56,020:INFO:Set up index.
2023-12-09 06:16:11,301:INFO:Initializing predict_model()
2023-12-09 06:16:11,306:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001ACB9B339A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001ACC1953310>)
2023-12-09 06:16:11,311:INFO:Checking exceptions
2023-12-09 06:16:11,311:INFO:Preloading libraries
2023-12-09 06:16:11,326:INFO:Set up data.
2023-12-09 06:16:11,351:INFO:Set up index.
2023-12-09 06:35:24,619:INFO:Initializing predict_model()
2023-12-09 06:35:24,620:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001ACC1951580>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001ACC1BFAA60>)
2023-12-09 06:35:24,620:INFO:Checking exceptions
2023-12-09 06:35:24,620:INFO:Preloading libraries
2023-12-09 06:35:24,623:INFO:Set up data.
2023-12-09 06:35:24,695:INFO:Set up index.
2023-12-09 06:40:15,840:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 06:40:15,840:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 06:40:15,840:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 06:40:15,840:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 06:40:16,038:INFO:Initializing load_model()
2023-12-09 06:40:16,038:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 06:40:16,119:INFO:Initializing load_model()
2023-12-09 06:40:16,119:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 06:40:16,159:INFO:Initializing load_model()
2023-12-09 06:40:16,159:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 06:40:38,293:INFO:Initializing predict_model()
2023-12-09 06:40:38,293:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021016221640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021016222310>)
2023-12-09 06:40:38,293:INFO:Checking exceptions
2023-12-09 06:40:38,293:INFO:Preloading libraries
2023-12-09 06:40:38,293:INFO:Set up data.
2023-12-09 06:40:38,314:INFO:Set up index.
2023-12-09 06:40:47,122:INFO:Initializing predict_model()
2023-12-09 06:40:47,122:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002100E3E2910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021016222310>)
2023-12-09 06:40:47,127:INFO:Checking exceptions
2023-12-09 06:40:47,127:INFO:Preloading libraries
2023-12-09 06:40:47,127:INFO:Set up data.
2023-12-09 06:40:47,127:INFO:Set up index.
2023-12-09 06:41:33,007:INFO:Initializing predict_model()
2023-12-09 06:41:33,007:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021016221EB0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210164B9A60>)
2023-12-09 06:41:33,011:INFO:Checking exceptions
2023-12-09 06:41:33,011:INFO:Preloading libraries
2023-12-09 06:41:33,011:INFO:Set up data.
2023-12-09 06:41:33,014:INFO:Set up index.
2023-12-09 06:41:35,180:INFO:Initializing predict_model()
2023-12-09 06:41:35,185:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021016221100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210164B9F70>)
2023-12-09 06:41:35,185:INFO:Checking exceptions
2023-12-09 06:41:35,185:INFO:Preloading libraries
2023-12-09 06:41:35,185:INFO:Set up data.
2023-12-09 06:41:35,193:INFO:Set up index.
2023-12-09 06:41:57,649:INFO:Initializing predict_model()
2023-12-09 06:41:57,649:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021016294520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210163094C0>)
2023-12-09 06:41:57,649:INFO:Checking exceptions
2023-12-09 06:41:57,649:INFO:Preloading libraries
2023-12-09 06:41:57,649:INFO:Set up data.
2023-12-09 06:41:57,657:INFO:Set up index.
2023-12-09 06:41:57,947:INFO:Initializing predict_model()
2023-12-09 06:41:57,947:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021016221D00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210164B9AF0>)
2023-12-09 06:41:57,947:INFO:Checking exceptions
2023-12-09 06:41:57,947:INFO:Preloading libraries
2023-12-09 06:41:57,947:INFO:Set up data.
2023-12-09 06:41:57,949:INFO:Set up index.
2023-12-09 06:42:01,117:INFO:Initializing predict_model()
2023-12-09 06:42:01,117:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021016221610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210164B9C10>)
2023-12-09 06:42:01,117:INFO:Checking exceptions
2023-12-09 06:42:01,117:INFO:Preloading libraries
2023-12-09 06:42:01,118:INFO:Set up data.
2023-12-09 06:42:01,129:INFO:Set up index.
2023-12-09 06:42:01,412:INFO:Initializing predict_model()
2023-12-09 06:42:01,412:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210162AE4F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021016222F70>)
2023-12-09 06:42:01,412:INFO:Checking exceptions
2023-12-09 06:42:01,412:INFO:Preloading libraries
2023-12-09 06:42:01,412:INFO:Set up data.
2023-12-09 06:42:01,413:INFO:Set up index.
2023-12-09 06:42:01,482:INFO:Initializing predict_model()
2023-12-09 06:42:01,483:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210162AEF40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021016222D30>)
2023-12-09 06:42:01,483:INFO:Checking exceptions
2023-12-09 06:42:01,483:INFO:Preloading libraries
2023-12-09 06:42:01,483:INFO:Set up data.
2023-12-09 06:42:01,485:INFO:Set up index.
2023-12-09 06:42:03,992:INFO:Initializing predict_model()
2023-12-09 06:42:03,992:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210162AE400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021016309160>)
2023-12-09 06:42:03,992:INFO:Checking exceptions
2023-12-09 06:42:03,992:INFO:Preloading libraries
2023-12-09 06:42:03,992:INFO:Set up data.
2023-12-09 06:42:04,005:INFO:Set up index.
2023-12-09 06:42:04,292:INFO:Initializing predict_model()
2023-12-09 06:42:04,293:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210162942E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210164B9E50>)
2023-12-09 06:42:04,293:INFO:Checking exceptions
2023-12-09 06:42:04,293:INFO:Preloading libraries
2023-12-09 06:42:04,293:INFO:Set up data.
2023-12-09 06:42:04,294:INFO:Set up index.
2023-12-09 06:42:06,147:INFO:Initializing predict_model()
2023-12-09 06:42:06,147:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021016294040>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000210164B9A60>)
2023-12-09 06:42:06,147:INFO:Checking exceptions
2023-12-09 06:42:06,147:INFO:Preloading libraries
2023-12-09 06:42:06,147:INFO:Set up data.
2023-12-09 06:42:06,159:INFO:Set up index.
2023-12-09 06:58:06,019:INFO:Initializing predict_model()
2023-12-09 06:58:06,019:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000210156A9B80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021016222310>)
2023-12-09 06:58:06,019:INFO:Checking exceptions
2023-12-09 06:58:06,019:INFO:Preloading libraries
2023-12-09 06:58:06,019:INFO:Set up data.
2023-12-09 06:58:06,021:INFO:Set up index.
2023-12-09 07:13:16,588:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:13:16,588:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:13:16,588:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:13:16,588:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:13:16,729:INFO:Initializing load_model()
2023-12-09 07:13:16,729:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 07:13:16,784:INFO:Initializing load_model()
2023-12-09 07:13:16,784:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 07:13:16,831:INFO:Initializing load_model()
2023-12-09 07:13:16,831:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 07:14:45,040:INFO:Initializing predict_model()
2023-12-09 07:14:45,045:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000170C35F1640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000170C35F2310>)
2023-12-09 07:14:45,045:INFO:Checking exceptions
2023-12-09 07:14:45,045:INFO:Preloading libraries
2023-12-09 07:14:45,045:INFO:Set up data.
2023-12-09 07:14:45,054:INFO:Set up index.
2023-12-09 07:20:05,465:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:20:05,465:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:20:05,465:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:20:05,465:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:20:05,610:INFO:Initializing load_model()
2023-12-09 07:20:05,610:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 07:20:05,670:INFO:Initializing load_model()
2023-12-09 07:20:05,670:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 07:20:05,710:INFO:Initializing load_model()
2023-12-09 07:20:05,710:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 07:22:30,734:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:22:30,739:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:22:30,739:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:22:30,739:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 07:22:30,898:INFO:Initializing load_model()
2023-12-09 07:22:30,898:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 07:22:30,953:INFO:Initializing load_model()
2023-12-09 07:22:30,958:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 07:22:30,998:INFO:Initializing load_model()
2023-12-09 07:22:31,003:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 07:22:35,701:INFO:Initializing predict_model()
2023-12-09 07:22:35,701:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC33EC1640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2310>)
2023-12-09 07:22:35,701:INFO:Checking exceptions
2023-12-09 07:22:35,701:INFO:Preloading libraries
2023-12-09 07:22:35,701:INFO:Set up data.
2023-12-09 07:22:35,711:INFO:Set up index.
2023-12-09 07:22:42,844:INFO:Initializing predict_model()
2023-12-09 07:22:42,844:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC2C092910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2310>)
2023-12-09 07:22:42,844:INFO:Checking exceptions
2023-12-09 07:22:42,844:INFO:Preloading libraries
2023-12-09 07:22:42,844:INFO:Set up data.
2023-12-09 07:22:42,854:INFO:Set up index.
2023-12-09 07:22:45,987:INFO:Initializing predict_model()
2023-12-09 07:22:45,987:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC2C054370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC20D0>)
2023-12-09 07:22:45,987:INFO:Checking exceptions
2023-12-09 07:22:45,987:INFO:Preloading libraries
2023-12-09 07:22:45,987:INFO:Set up data.
2023-12-09 07:22:45,997:INFO:Set up index.
2023-12-09 07:22:56,604:INFO:Initializing predict_model()
2023-12-09 07:22:56,604:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC2C44E7C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2EE0>)
2023-12-09 07:22:56,604:INFO:Checking exceptions
2023-12-09 07:22:56,604:INFO:Preloading libraries
2023-12-09 07:22:56,604:INFO:Set up data.
2023-12-09 07:22:56,609:INFO:Set up index.
2023-12-09 07:23:02,127:INFO:Initializing predict_model()
2023-12-09 07:23:02,127:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC28EEFFA0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2160>)
2023-12-09 07:23:02,127:INFO:Checking exceptions
2023-12-09 07:23:02,127:INFO:Preloading libraries
2023-12-09 07:23:02,127:INFO:Set up data.
2023-12-09 07:23:02,137:INFO:Set up index.
2023-12-09 07:23:06,654:INFO:Initializing predict_model()
2023-12-09 07:23:06,654:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC3312D160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2280>)
2023-12-09 07:23:06,654:INFO:Checking exceptions
2023-12-09 07:23:06,654:INFO:Preloading libraries
2023-12-09 07:23:06,657:INFO:Set up data.
2023-12-09 07:23:06,666:INFO:Set up index.
2023-12-09 07:23:09,750:INFO:Initializing predict_model()
2023-12-09 07:23:09,750:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC2C092910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2DC0>)
2023-12-09 07:23:09,750:INFO:Checking exceptions
2023-12-09 07:23:09,750:INFO:Preloading libraries
2023-12-09 07:23:09,755:INFO:Set up data.
2023-12-09 07:23:09,765:INFO:Set up index.
2023-12-09 07:23:12,852:INFO:Initializing predict_model()
2023-12-09 07:23:12,852:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC3312D040>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2F70>)
2023-12-09 07:23:12,852:INFO:Checking exceptions
2023-12-09 07:23:12,852:INFO:Preloading libraries
2023-12-09 07:23:12,852:INFO:Set up data.
2023-12-09 07:23:12,862:INFO:Set up index.
2023-12-09 07:23:37,428:INFO:Initializing predict_model()
2023-12-09 07:23:37,428:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC2C092940>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC23A0>)
2023-12-09 07:23:37,428:INFO:Checking exceptions
2023-12-09 07:23:37,428:INFO:Preloading libraries
2023-12-09 07:23:37,428:INFO:Set up data.
2023-12-09 07:23:37,439:INFO:Set up index.
2023-12-09 07:23:45,924:INFO:Initializing predict_model()
2023-12-09 07:23:45,924:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC3312D040>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC21F0>)
2023-12-09 07:23:45,924:INFO:Checking exceptions
2023-12-09 07:23:45,924:INFO:Preloading libraries
2023-12-09 07:23:45,924:INFO:Set up data.
2023-12-09 07:23:45,934:INFO:Set up index.
2023-12-09 07:23:50,615:INFO:Initializing predict_model()
2023-12-09 07:23:50,615:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC2C092970>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2310>)
2023-12-09 07:23:50,616:INFO:Checking exceptions
2023-12-09 07:23:50,616:INFO:Preloading libraries
2023-12-09 07:23:50,617:INFO:Set up data.
2023-12-09 07:23:50,627:INFO:Set up index.
2023-12-09 07:23:54,284:INFO:Initializing predict_model()
2023-12-09 07:23:54,284:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC32B695B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2EE0>)
2023-12-09 07:23:54,284:INFO:Checking exceptions
2023-12-09 07:23:54,284:INFO:Preloading libraries
2023-12-09 07:23:54,288:INFO:Set up data.
2023-12-09 07:23:54,298:INFO:Set up index.
2023-12-09 07:24:00,632:INFO:Initializing predict_model()
2023-12-09 07:24:00,633:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC329716D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC20D0>)
2023-12-09 07:24:00,633:INFO:Checking exceptions
2023-12-09 07:24:00,633:INFO:Preloading libraries
2023-12-09 07:24:00,633:INFO:Set up data.
2023-12-09 07:24:00,638:INFO:Set up index.
2023-12-09 07:24:05,396:INFO:Initializing predict_model()
2023-12-09 07:24:05,396:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC2C092910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2040>)
2023-12-09 07:24:05,396:INFO:Checking exceptions
2023-12-09 07:24:05,396:INFO:Preloading libraries
2023-12-09 07:24:05,396:INFO:Set up data.
2023-12-09 07:24:05,404:INFO:Set up index.
2023-12-09 08:46:30,731:INFO:Initializing predict_model()
2023-12-09 08:46:30,731:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC3312D1F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC23A0>)
2023-12-09 08:46:30,731:INFO:Checking exceptions
2023-12-09 08:46:30,731:INFO:Preloading libraries
2023-12-09 08:46:30,731:INFO:Set up data.
2023-12-09 08:46:30,744:INFO:Set up index.
2023-12-09 08:46:39,667:INFO:Initializing predict_model()
2023-12-09 08:46:39,667:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC32971A60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2DC0>)
2023-12-09 08:46:39,667:INFO:Checking exceptions
2023-12-09 08:46:39,667:INFO:Preloading libraries
2023-12-09 08:46:39,668:INFO:Set up data.
2023-12-09 08:46:39,674:INFO:Set up index.
2023-12-09 08:47:00,807:INFO:Initializing predict_model()
2023-12-09 08:47:00,807:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC33359C40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2310>)
2023-12-09 08:47:00,807:INFO:Checking exceptions
2023-12-09 08:47:00,807:INFO:Preloading libraries
2023-12-09 08:47:00,807:INFO:Set up data.
2023-12-09 08:47:00,812:INFO:Set up index.
2023-12-09 08:47:19,129:INFO:Initializing predict_model()
2023-12-09 08:47:19,129:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC33EC1670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2160>)
2023-12-09 08:47:19,129:INFO:Checking exceptions
2023-12-09 08:47:19,129:INFO:Preloading libraries
2023-12-09 08:47:19,129:INFO:Set up data.
2023-12-09 08:47:19,145:INFO:Set up index.
2023-12-09 08:47:26,762:INFO:Initializing predict_model()
2023-12-09 08:47:26,762:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC33F2B730>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC21F0>)
2023-12-09 08:47:26,762:INFO:Checking exceptions
2023-12-09 08:47:26,762:INFO:Preloading libraries
2023-12-09 08:47:26,763:INFO:Set up data.
2023-12-09 08:47:26,770:INFO:Set up index.
2023-12-09 08:47:31,405:INFO:Initializing predict_model()
2023-12-09 08:47:31,405:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CC33F3D7F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CC33EC2280>)
2023-12-09 08:47:31,405:INFO:Checking exceptions
2023-12-09 08:47:31,405:INFO:Preloading libraries
2023-12-09 08:47:31,405:INFO:Set up data.
2023-12-09 08:47:31,417:INFO:Set up index.
2023-12-09 09:39:57,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:39:57,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:39:57,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:39:57,333:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:39:57,582:INFO:Initializing load_model()
2023-12-09 09:39:57,582:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 09:39:57,681:INFO:Initializing load_model()
2023-12-09 09:39:57,681:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 09:39:57,721:INFO:Initializing load_model()
2023-12-09 09:39:57,721:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 09:40:42,030:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:40:42,030:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:40:42,030:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:40:42,030:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:40:42,160:INFO:Initializing load_model()
2023-12-09 09:40:42,160:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 09:40:42,215:INFO:Initializing load_model()
2023-12-09 09:40:42,215:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 09:40:42,255:INFO:Initializing load_model()
2023-12-09 09:40:42,255:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 09:40:53,487:INFO:Initializing predict_model()
2023-12-09 09:40:53,492:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025544191640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025544192310>)
2023-12-09 09:40:53,492:INFO:Checking exceptions
2023-12-09 09:40:53,492:INFO:Preloading libraries
2023-12-09 09:40:53,492:INFO:Set up data.
2023-12-09 09:40:53,508:INFO:Set up index.
2023-12-09 09:41:41,993:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:41:41,993:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:41:41,993:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:41:41,993:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:41:42,128:INFO:Initializing load_model()
2023-12-09 09:41:42,128:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 09:41:42,178:INFO:Initializing load_model()
2023-12-09 09:41:42,178:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 09:41:42,218:INFO:Initializing load_model()
2023-12-09 09:41:42,218:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 09:44:46,880:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:44:46,880:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:44:46,880:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:44:46,880:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:44:47,005:INFO:Initializing load_model()
2023-12-09 09:44:47,005:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 09:44:47,060:INFO:Initializing load_model()
2023-12-09 09:44:47,060:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 09:44:47,099:INFO:Initializing load_model()
2023-12-09 09:44:47,099:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 09:45:28,107:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:45:28,107:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:45:28,107:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:45:28,107:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 09:45:28,237:INFO:Initializing load_model()
2023-12-09 09:45:28,237:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 09:45:28,292:INFO:Initializing load_model()
2023-12-09 09:45:28,292:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 09:45:28,327:INFO:Initializing load_model()
2023-12-09 09:45:28,327:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 10:00:02,705:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 10:00:02,705:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 10:00:02,710:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 10:00:02,710:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 10:00:02,860:INFO:Initializing load_model()
2023-12-09 10:00:02,860:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 10:00:02,920:INFO:Initializing load_model()
2023-12-09 10:00:02,920:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 10:00:02,950:INFO:Initializing load_model()
2023-12-09 10:00:02,950:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 10:17:38,162:INFO:Initializing predict_model()
2023-12-09 10:17:38,162:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000011CCEAE13D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000011CCEAE2280>)
2023-12-09 10:17:38,162:INFO:Checking exceptions
2023-12-09 10:17:38,162:INFO:Preloading libraries
2023-12-09 10:17:38,164:INFO:Set up data.
2023-12-09 10:17:38,169:INFO:Set up index.
2023-12-09 10:29:28,581:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 10:29:28,581:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 10:29:28,581:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 10:29:28,581:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-09 10:29:28,780:INFO:Initializing load_model()
2023-12-09 10:29:28,780:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-09 10:29:28,867:INFO:Initializing load_model()
2023-12-09 10:29:28,867:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-09 10:29:28,912:INFO:Initializing load_model()
2023-12-09 10:29:28,912:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-09 10:29:39,886:INFO:Initializing predict_model()
2023-12-09 10:29:39,886:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F311E1640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2310>)
2023-12-09 10:29:39,886:INFO:Checking exceptions
2023-12-09 10:29:39,886:INFO:Preloading libraries
2023-12-09 10:29:39,886:INFO:Set up data.
2023-12-09 10:29:39,896:INFO:Set up index.
2023-12-09 10:39:37,339:INFO:Initializing predict_model()
2023-12-09 10:39:37,341:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F2FC91A60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2310>)
2023-12-09 10:39:37,343:INFO:Checking exceptions
2023-12-09 10:39:37,343:INFO:Preloading libraries
2023-12-09 10:39:37,343:INFO:Set up data.
2023-12-09 10:39:37,356:INFO:Set up index.
2023-12-09 10:39:48,933:INFO:Initializing predict_model()
2023-12-09 10:39:48,934:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F3043D040>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E20D0>)
2023-12-09 10:39:48,934:INFO:Checking exceptions
2023-12-09 10:39:48,934:INFO:Preloading libraries
2023-12-09 10:39:48,935:INFO:Set up data.
2023-12-09 10:39:48,952:INFO:Set up index.
2023-12-10 08:04:35,764:INFO:Initializing predict_model()
2023-12-10 08:04:35,768:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F3043D640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2F70>)
2023-12-10 08:04:35,768:INFO:Checking exceptions
2023-12-10 08:04:35,769:INFO:Preloading libraries
2023-12-10 08:04:35,798:INFO:Set up data.
2023-12-10 08:04:35,847:INFO:Set up index.
2023-12-10 08:04:42,035:INFO:Initializing predict_model()
2023-12-10 08:04:42,035:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F3043D190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2D30>)
2023-12-10 08:04:42,035:INFO:Checking exceptions
2023-12-10 08:04:42,035:INFO:Preloading libraries
2023-12-10 08:04:42,037:INFO:Set up data.
2023-12-10 08:04:42,044:INFO:Set up index.
2023-12-10 08:04:45,109:INFO:Initializing predict_model()
2023-12-10 08:04:45,109:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F293B2910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E21F0>)
2023-12-10 08:04:45,109:INFO:Checking exceptions
2023-12-10 08:04:45,110:INFO:Preloading libraries
2023-12-10 08:04:45,110:INFO:Set up data.
2023-12-10 08:04:45,127:INFO:Set up index.
2023-12-10 08:08:08,158:INFO:Initializing predict_model()
2023-12-10 08:08:08,159:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F312BABE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2E50>)
2023-12-10 08:08:08,159:INFO:Checking exceptions
2023-12-10 08:08:08,159:INFO:Preloading libraries
2023-12-10 08:08:08,159:INFO:Set up data.
2023-12-10 08:08:08,177:INFO:Set up index.
2023-12-10 08:08:08,677:INFO:Initializing predict_model()
2023-12-10 08:08:08,677:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F312BB4C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E20D0>)
2023-12-10 08:08:08,677:INFO:Checking exceptions
2023-12-10 08:08:08,677:INFO:Preloading libraries
2023-12-10 08:08:08,677:INFO:Set up data.
2023-12-10 08:08:08,693:INFO:Set up index.
2023-12-10 08:08:09,111:INFO:Initializing predict_model()
2023-12-10 08:08:09,111:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F2FE792B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2040>)
2023-12-10 08:08:09,111:INFO:Checking exceptions
2023-12-10 08:08:09,111:INFO:Preloading libraries
2023-12-10 08:08:09,111:INFO:Set up data.
2023-12-10 08:08:09,127:INFO:Set up index.
2023-12-10 08:12:26,049:INFO:Initializing predict_model()
2023-12-10 08:12:26,049:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F312BB9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2DC0>)
2023-12-10 08:12:26,049:INFO:Checking exceptions
2023-12-10 08:12:26,049:INFO:Preloading libraries
2023-12-10 08:12:26,050:INFO:Set up data.
2023-12-10 08:12:26,051:INFO:Set up index.
2023-12-10 08:12:26,376:INFO:Initializing predict_model()
2023-12-10 08:12:26,376:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F312C2FA0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2160>)
2023-12-10 08:12:26,376:INFO:Checking exceptions
2023-12-10 08:12:26,376:INFO:Preloading libraries
2023-12-10 08:12:26,376:INFO:Set up data.
2023-12-10 08:12:26,384:INFO:Set up index.
2023-12-10 08:12:26,718:INFO:Initializing predict_model()
2023-12-10 08:12:26,718:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F2FE79370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2D30>)
2023-12-10 08:12:26,718:INFO:Checking exceptions
2023-12-10 08:12:26,718:INFO:Preloading libraries
2023-12-10 08:12:26,718:INFO:Set up data.
2023-12-10 08:12:26,732:INFO:Set up index.
2023-12-10 08:15:30,083:INFO:Initializing predict_model()
2023-12-10 08:15:30,084:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F2FE79130>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E23A0>)
2023-12-10 08:15:30,084:INFO:Checking exceptions
2023-12-10 08:15:30,084:INFO:Preloading libraries
2023-12-10 08:15:30,084:INFO:Set up data.
2023-12-10 08:15:30,100:INFO:Set up index.
2023-12-10 08:15:30,616:INFO:Initializing predict_model()
2023-12-10 08:15:30,619:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F3043D160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2160>)
2023-12-10 08:15:30,619:INFO:Checking exceptions
2023-12-10 08:15:30,619:INFO:Preloading libraries
2023-12-10 08:15:30,619:INFO:Set up data.
2023-12-10 08:15:30,635:INFO:Set up index.
2023-12-10 08:15:31,184:INFO:Initializing predict_model()
2023-12-10 08:15:31,184:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F2620FFA0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2DC0>)
2023-12-10 08:15:31,184:INFO:Checking exceptions
2023-12-10 08:15:31,184:INFO:Preloading libraries
2023-12-10 08:15:31,185:INFO:Set up data.
2023-12-10 08:15:31,201:INFO:Set up index.
2023-12-10 08:15:40,130:INFO:Initializing predict_model()
2023-12-10 08:15:40,130:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F293B29A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2040>)
2023-12-10 08:15:40,130:INFO:Checking exceptions
2023-12-10 08:15:40,130:INFO:Preloading libraries
2023-12-10 08:15:40,130:INFO:Set up data.
2023-12-10 08:15:40,146:INFO:Set up index.
2023-12-10 08:15:40,655:INFO:Initializing predict_model()
2023-12-10 08:15:40,656:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F29374730>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E2160>)
2023-12-10 08:15:40,656:INFO:Checking exceptions
2023-12-10 08:15:40,656:INFO:Preloading libraries
2023-12-10 08:15:40,659:INFO:Set up data.
2023-12-10 08:15:40,701:INFO:Set up index.
2023-12-10 08:15:41,379:INFO:Initializing predict_model()
2023-12-10 08:15:41,379:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019F2620F880>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000019F311E21F0>)
2023-12-10 08:15:41,379:INFO:Checking exceptions
2023-12-10 08:15:41,379:INFO:Preloading libraries
2023-12-10 08:15:41,379:INFO:Set up data.
2023-12-10 08:15:41,397:INFO:Set up index.
2023-12-10 08:24:11,224:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 08:24:11,224:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 08:24:11,224:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 08:24:11,224:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 08:24:11,495:INFO:Initializing load_model()
2023-12-10 08:24:11,495:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 08:24:11,603:INFO:Initializing load_model()
2023-12-10 08:24:11,603:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 08:24:11,654:INFO:Initializing load_model()
2023-12-10 08:24:11,654:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 08:29:28,811:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 08:29:28,811:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 08:29:28,811:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 08:29:28,811:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 08:29:29,021:INFO:Initializing load_model()
2023-12-10 08:29:29,021:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 08:29:29,079:INFO:Initializing load_model()
2023-12-10 08:29:29,079:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 08:29:29,146:INFO:Initializing load_model()
2023-12-10 08:29:29,146:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 09:05:14,336:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:05:14,336:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:05:14,336:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:05:14,336:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:05:14,589:INFO:Initializing load_model()
2023-12-10 09:05:14,589:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 09:05:14,661:INFO:Initializing load_model()
2023-12-10 09:05:14,661:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 09:05:14,710:INFO:Initializing load_model()
2023-12-10 09:05:14,710:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 09:18:32,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:18:32,269:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:18:32,269:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:18:32,269:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:18:32,609:INFO:Initializing load_model()
2023-12-10 09:18:32,609:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 09:18:32,748:INFO:Initializing load_model()
2023-12-10 09:18:32,748:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 09:18:32,851:INFO:Initializing load_model()
2023-12-10 09:18:32,851:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 09:19:54,349:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:19:54,349:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:19:54,349:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:19:54,349:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:19:54,600:INFO:Initializing load_model()
2023-12-10 09:19:54,600:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 09:19:54,692:INFO:Initializing load_model()
2023-12-10 09:19:54,692:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 09:19:54,751:INFO:Initializing load_model()
2023-12-10 09:19:54,751:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 09:20:15,241:INFO:Initializing predict_model()
2023-12-10 09:20:15,241:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E156361670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E156362310>)
2023-12-10 09:20:15,241:INFO:Checking exceptions
2023-12-10 09:20:15,241:INFO:Preloading libraries
2023-12-10 09:20:15,250:INFO:Set up data.
2023-12-10 09:20:15,273:INFO:Set up index.
2023-12-10 09:20:15,891:INFO:Initializing predict_model()
2023-12-10 09:20:15,891:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E154E026D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E14E525790>)
2023-12-10 09:20:15,891:INFO:Checking exceptions
2023-12-10 09:20:15,891:INFO:Preloading libraries
2023-12-10 09:20:15,891:INFO:Set up data.
2023-12-10 09:20:15,911:INFO:Set up index.
2023-12-10 09:20:29,940:INFO:Initializing predict_model()
2023-12-10 09:20:29,940:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E1563CB9A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E156465B80>)
2023-12-10 09:20:29,940:INFO:Checking exceptions
2023-12-10 09:20:29,940:INFO:Preloading libraries
2023-12-10 09:20:29,940:INFO:Set up data.
2023-12-10 09:20:29,952:INFO:Set up index.
2023-12-10 09:20:30,453:INFO:Initializing predict_model()
2023-12-10 09:20:30,453:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E156361610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E14E525790>)
2023-12-10 09:20:30,469:INFO:Checking exceptions
2023-12-10 09:20:30,469:INFO:Preloading libraries
2023-12-10 09:20:30,469:INFO:Set up data.
2023-12-10 09:20:30,471:INFO:Set up index.
2023-12-10 09:20:30,973:INFO:Initializing predict_model()
2023-12-10 09:20:30,973:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E14B37F880>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E14E525790>)
2023-12-10 09:20:30,973:INFO:Checking exceptions
2023-12-10 09:20:30,973:INFO:Preloading libraries
2023-12-10 09:20:30,973:INFO:Set up data.
2023-12-10 09:20:30,987:INFO:Set up index.
2023-12-10 09:20:31,490:INFO:Initializing predict_model()
2023-12-10 09:20:31,490:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E1555CD190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E14E525790>)
2023-12-10 09:20:31,490:INFO:Checking exceptions
2023-12-10 09:20:31,490:INFO:Preloading libraries
2023-12-10 09:20:31,490:INFO:Set up data.
2023-12-10 09:20:31,504:INFO:Set up index.
2023-12-10 09:22:02,488:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:22:02,488:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:22:02,488:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:22:02,488:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:22:02,788:INFO:Initializing load_model()
2023-12-10 09:22:02,788:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 09:22:02,950:INFO:Initializing load_model()
2023-12-10 09:22:02,951:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 09:22:02,999:INFO:Initializing load_model()
2023-12-10 09:22:02,999:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 09:22:17,430:INFO:Initializing predict_model()
2023-12-10 09:22:17,430:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000194114F1670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194114F2310>)
2023-12-10 09:22:17,430:INFO:Checking exceptions
2023-12-10 09:22:17,431:INFO:Preloading libraries
2023-12-10 09:22:17,431:INFO:Set up data.
2023-12-10 09:22:17,446:INFO:Set up index.
2023-12-10 09:22:17,944:INFO:Initializing predict_model()
2023-12-10 09:22:17,944:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001940FF826D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194096A5790>)
2023-12-10 09:22:17,944:INFO:Checking exceptions
2023-12-10 09:22:17,944:INFO:Preloading libraries
2023-12-10 09:22:17,944:INFO:Set up data.
2023-12-10 09:22:17,961:INFO:Set up index.
2023-12-10 09:22:18,328:INFO:Initializing predict_model()
2023-12-10 09:22:18,328:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001941074D160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194096A5790>)
2023-12-10 09:22:18,328:INFO:Checking exceptions
2023-12-10 09:22:18,328:INFO:Preloading libraries
2023-12-10 09:22:18,344:INFO:Set up data.
2023-12-10 09:22:18,346:INFO:Set up index.
2023-12-10 09:22:23,992:INFO:Initializing predict_model()
2023-12-10 09:22:23,992:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000194114F1820>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194115C5EE0>)
2023-12-10 09:22:23,992:INFO:Checking exceptions
2023-12-10 09:22:23,992:INFO:Preloading libraries
2023-12-10 09:22:23,992:INFO:Set up data.
2023-12-10 09:22:24,014:INFO:Set up index.
2023-12-10 09:22:24,501:INFO:Initializing predict_model()
2023-12-10 09:22:24,501:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019411622340>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194115C5F70>)
2023-12-10 09:22:24,501:INFO:Checking exceptions
2023-12-10 09:22:24,501:INFO:Preloading libraries
2023-12-10 09:22:24,501:INFO:Set up data.
2023-12-10 09:22:24,501:INFO:Set up index.
2023-12-10 09:22:24,950:INFO:Initializing predict_model()
2023-12-10 09:22:24,950:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001941156AC70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194096A5790>)
2023-12-10 09:22:24,950:INFO:Checking exceptions
2023-12-10 09:22:24,950:INFO:Preloading libraries
2023-12-10 09:22:24,950:INFO:Set up data.
2023-12-10 09:22:24,967:INFO:Set up index.
2023-12-10 09:22:34,661:INFO:Initializing predict_model()
2023-12-10 09:22:34,661:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001941155BA60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194115C5310>)
2023-12-10 09:22:34,661:INFO:Checking exceptions
2023-12-10 09:22:34,661:INFO:Preloading libraries
2023-12-10 09:22:34,661:INFO:Set up data.
2023-12-10 09:22:34,677:INFO:Set up index.
2023-12-10 09:22:34,952:INFO:Initializing predict_model()
2023-12-10 09:22:34,952:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000019411624910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194115C5F70>)
2023-12-10 09:22:34,952:INFO:Checking exceptions
2023-12-10 09:22:34,952:INFO:Preloading libraries
2023-12-10 09:22:34,952:INFO:Set up data.
2023-12-10 09:22:34,952:INFO:Set up index.
2023-12-10 09:22:35,269:INFO:Initializing predict_model()
2023-12-10 09:22:35,269:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000194114F18B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194115C5F70>)
2023-12-10 09:22:35,269:INFO:Checking exceptions
2023-12-10 09:22:35,269:INFO:Preloading libraries
2023-12-10 09:22:35,269:INFO:Set up data.
2023-12-10 09:22:35,279:INFO:Set up index.
2023-12-10 09:22:35,562:INFO:Initializing predict_model()
2023-12-10 09:22:35,562:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001941074D190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194096A5790>)
2023-12-10 09:22:35,562:INFO:Checking exceptions
2023-12-10 09:22:35,562:INFO:Preloading libraries
2023-12-10 09:22:35,562:INFO:Set up data.
2023-12-10 09:22:35,578:INFO:Set up index.
2023-12-10 09:22:35,955:INFO:Initializing predict_model()
2023-12-10 09:22:35,955:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001941074D1F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194115C5700>)
2023-12-10 09:22:35,955:INFO:Checking exceptions
2023-12-10 09:22:35,955:INFO:Preloading libraries
2023-12-10 09:22:35,955:INFO:Set up data.
2023-12-10 09:22:35,964:INFO:Set up index.
2023-12-10 09:22:36,287:INFO:Initializing predict_model()
2023-12-10 09:22:36,287:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001941074D160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194096A5790>)
2023-12-10 09:22:36,287:INFO:Checking exceptions
2023-12-10 09:22:36,287:INFO:Preloading libraries
2023-12-10 09:22:36,287:INFO:Set up data.
2023-12-10 09:22:36,296:INFO:Set up index.
2023-12-10 09:22:50,524:INFO:Initializing predict_model()
2023-12-10 09:22:50,525:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000194064FFFA0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194115C5310>)
2023-12-10 09:22:50,525:INFO:Checking exceptions
2023-12-10 09:22:50,525:INFO:Preloading libraries
2023-12-10 09:22:50,526:INFO:Set up data.
2023-12-10 09:22:50,544:INFO:Set up index.
2023-12-10 09:22:54,801:INFO:Initializing predict_model()
2023-12-10 09:22:54,801:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000194064FF1C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194115C5940>)
2023-12-10 09:22:54,801:INFO:Checking exceptions
2023-12-10 09:22:54,801:INFO:Preloading libraries
2023-12-10 09:22:54,801:INFO:Set up data.
2023-12-10 09:22:54,817:INFO:Set up index.
2023-12-10 09:41:09,076:INFO:Initializing predict_model()
2023-12-10 09:41:09,076:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000194116227C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000194115C5310>)
2023-12-10 09:41:09,076:INFO:Checking exceptions
2023-12-10 09:41:09,076:INFO:Preloading libraries
2023-12-10 09:41:09,076:INFO:Set up data.
2023-12-10 09:41:09,076:INFO:Set up index.
2023-12-10 09:43:47,878:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:43:47,878:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:43:47,878:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:43:47,878:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:43:48,207:INFO:Initializing load_model()
2023-12-10 09:43:48,207:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 09:43:48,359:INFO:Initializing load_model()
2023-12-10 09:43:48,359:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 09:43:48,418:INFO:Initializing load_model()
2023-12-10 09:43:48,418:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 09:44:05,498:INFO:Initializing predict_model()
2023-12-10 09:44:05,499:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002F49E5B1670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002F49E5B2310>)
2023-12-10 09:44:05,499:INFO:Checking exceptions
2023-12-10 09:44:05,500:INFO:Preloading libraries
2023-12-10 09:44:05,501:INFO:Set up data.
2023-12-10 09:44:05,519:INFO:Set up index.
2023-12-10 09:44:06,001:INFO:Initializing predict_model()
2023-12-10 09:44:06,001:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002F49D24A2B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002F496785700>)
2023-12-10 09:44:06,001:INFO:Checking exceptions
2023-12-10 09:44:06,001:INFO:Preloading libraries
2023-12-10 09:44:06,001:INFO:Set up data.
2023-12-10 09:44:06,018:INFO:Set up index.
2023-12-10 09:46:01,400:INFO:Initializing predict_model()
2023-12-10 09:46:01,401:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002F4935A1910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002F49E5B2EE0>)
2023-12-10 09:46:01,401:INFO:Checking exceptions
2023-12-10 09:46:01,401:INFO:Preloading libraries
2023-12-10 09:46:01,402:INFO:Set up data.
2023-12-10 09:46:01,419:INFO:Set up index.
2023-12-10 09:46:01,800:INFO:Initializing predict_model()
2023-12-10 09:46:01,800:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002F4935A1970>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002F49E5B20D0>)
2023-12-10 09:46:01,800:INFO:Checking exceptions
2023-12-10 09:46:01,800:INFO:Preloading libraries
2023-12-10 09:46:01,800:INFO:Set up data.
2023-12-10 09:46:01,809:INFO:Set up index.
2023-12-10 09:46:02,118:INFO:Initializing predict_model()
2023-12-10 09:46:02,118:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002F49D81D1F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002F49E5B2040>)
2023-12-10 09:46:02,118:INFO:Checking exceptions
2023-12-10 09:46:02,118:INFO:Preloading libraries
2023-12-10 09:46:02,126:INFO:Set up data.
2023-12-10 09:46:02,133:INFO:Set up index.
2023-12-10 09:47:19,915:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:47:19,915:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:47:19,915:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:47:19,915:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:47:20,193:INFO:Initializing load_model()
2023-12-10 09:47:20,193:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 09:47:20,267:INFO:Initializing load_model()
2023-12-10 09:47:20,267:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 09:47:20,335:INFO:Initializing load_model()
2023-12-10 09:47:20,336:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 09:48:16,087:INFO:Initializing predict_model()
2023-12-10 09:48:16,087:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002627B4D2670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002627B4D3310>)
2023-12-10 09:48:16,087:INFO:Checking exceptions
2023-12-10 09:48:16,087:INFO:Preloading libraries
2023-12-10 09:48:16,087:INFO:Set up data.
2023-12-10 09:48:16,101:INFO:Set up index.
2023-12-10 09:48:16,605:INFO:Initializing predict_model()
2023-12-10 09:48:16,605:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026279F82850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262736A4790>)
2023-12-10 09:48:16,605:INFO:Checking exceptions
2023-12-10 09:48:16,611:INFO:Preloading libraries
2023-12-10 09:48:16,612:INFO:Set up data.
2023-12-10 09:48:16,628:INFO:Set up index.
2023-12-10 09:48:43,967:INFO:Initializing predict_model()
2023-12-10 09:48:43,967:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002627B5349A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002627B5A6B80>)
2023-12-10 09:48:43,967:INFO:Checking exceptions
2023-12-10 09:48:43,967:INFO:Preloading libraries
2023-12-10 09:48:43,967:INFO:Set up data.
2023-12-10 09:48:43,981:INFO:Set up index.
2023-12-10 09:48:44,501:INFO:Initializing predict_model()
2023-12-10 09:48:44,502:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002627B4F6790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002627B5A6430>)
2023-12-10 09:48:44,502:INFO:Checking exceptions
2023-12-10 09:48:44,502:INFO:Preloading libraries
2023-12-10 09:48:44,502:INFO:Set up data.
2023-12-10 09:48:44,517:INFO:Set up index.
2023-12-10 09:48:44,966:INFO:Initializing predict_model()
2023-12-10 09:48:44,966:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002627B534610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262736A4790>)
2023-12-10 09:48:44,966:INFO:Checking exceptions
2023-12-10 09:48:44,966:INFO:Preloading libraries
2023-12-10 09:48:44,966:INFO:Set up data.
2023-12-10 09:48:44,982:INFO:Set up index.
2023-12-10 09:51:36,137:INFO:Initializing predict_model()
2023-12-10 09:51:36,137:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002627B4F6F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002627B5A6310>)
2023-12-10 09:51:36,137:INFO:Checking exceptions
2023-12-10 09:51:36,137:INFO:Preloading libraries
2023-12-10 09:51:36,137:INFO:Set up data.
2023-12-10 09:51:36,154:INFO:Set up index.
2023-12-10 09:51:36,508:INFO:Initializing predict_model()
2023-12-10 09:51:36,508:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002627B5B8220>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262736A4790>)
2023-12-10 09:51:36,508:INFO:Checking exceptions
2023-12-10 09:51:36,508:INFO:Preloading libraries
2023-12-10 09:51:36,508:INFO:Set up data.
2023-12-10 09:51:36,522:INFO:Set up index.
2023-12-10 09:57:06,274:INFO:Initializing predict_model()
2023-12-10 09:57:06,280:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002627B54CC40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002627B5A6F70>)
2023-12-10 09:57:06,280:INFO:Checking exceptions
2023-12-10 09:57:06,280:INFO:Preloading libraries
2023-12-10 09:57:06,281:INFO:Set up data.
2023-12-10 09:57:06,282:INFO:Set up index.
2023-12-10 09:57:06,963:INFO:Initializing predict_model()
2023-12-10 09:57:06,963:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002627B4F6CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000262736A4790>)
2023-12-10 09:57:06,963:INFO:Checking exceptions
2023-12-10 09:57:06,963:INFO:Preloading libraries
2023-12-10 09:57:06,963:INFO:Set up data.
2023-12-10 09:57:06,997:INFO:Set up index.
2023-12-10 09:57:27,133:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:57:27,133:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:57:27,133:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:57:27,133:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:57:27,459:INFO:Initializing load_model()
2023-12-10 09:57:27,459:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 09:57:27,598:INFO:Initializing load_model()
2023-12-10 09:57:27,598:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 09:57:27,649:INFO:Initializing load_model()
2023-12-10 09:57:27,649:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 09:57:40,232:INFO:Initializing predict_model()
2023-12-10 09:57:40,232:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002BDC6FE2670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002BDC6FE3310>)
2023-12-10 09:57:40,232:INFO:Checking exceptions
2023-12-10 09:57:40,232:INFO:Preloading libraries
2023-12-10 09:57:40,232:INFO:Set up data.
2023-12-10 09:57:40,239:INFO:Set up index.
2023-12-10 09:57:40,763:INFO:Initializing predict_model()
2023-12-10 09:57:40,764:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002BDC5A92850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002BDBF1B5790>)
2023-12-10 09:57:40,764:INFO:Checking exceptions
2023-12-10 09:57:40,764:INFO:Preloading libraries
2023-12-10 09:57:40,764:INFO:Set up data.
2023-12-10 09:57:40,772:INFO:Set up index.
2023-12-10 09:57:41,249:INFO:Initializing predict_model()
2023-12-10 09:57:41,249:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002BDBC003520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002BDBF1B5790>)
2023-12-10 09:57:41,249:INFO:Checking exceptions
2023-12-10 09:57:41,249:INFO:Preloading libraries
2023-12-10 09:57:41,249:INFO:Set up data.
2023-12-10 09:57:41,266:INFO:Set up index.
2023-12-10 09:57:41,765:INFO:Initializing predict_model()
2023-12-10 09:57:41,765:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002BDB8E83BE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002BDBF1B5790>)
2023-12-10 09:57:41,765:INFO:Checking exceptions
2023-12-10 09:57:41,765:INFO:Preloading libraries
2023-12-10 09:57:41,765:INFO:Set up data.
2023-12-10 09:57:41,785:INFO:Set up index.
2023-12-10 09:58:11,879:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:58:11,879:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:58:11,879:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:58:11,879:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 09:58:12,217:INFO:Initializing load_model()
2023-12-10 09:58:12,217:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 09:58:12,325:INFO:Initializing load_model()
2023-12-10 09:58:12,325:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 09:58:12,393:INFO:Initializing load_model()
2023-12-10 09:58:12,393:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 09:58:27,129:INFO:Initializing predict_model()
2023-12-10 09:58:27,129:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000029F92C52670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029F92C53310>)
2023-12-10 09:58:27,129:INFO:Checking exceptions
2023-12-10 09:58:27,129:INFO:Preloading libraries
2023-12-10 09:58:27,142:INFO:Set up data.
2023-12-10 09:58:27,155:INFO:Set up index.
2023-12-10 09:58:27,678:INFO:Initializing predict_model()
2023-12-10 09:58:27,678:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000029F91712850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029F8AE34790>)
2023-12-10 09:58:27,678:INFO:Checking exceptions
2023-12-10 09:58:27,678:INFO:Preloading libraries
2023-12-10 09:58:27,678:INFO:Set up data.
2023-12-10 09:58:27,695:INFO:Set up index.
2023-12-10 09:58:28,196:INFO:Initializing predict_model()
2023-12-10 09:58:28,196:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000029F918FA2B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029F8AE34790>)
2023-12-10 09:58:28,196:INFO:Checking exceptions
2023-12-10 09:58:28,196:INFO:Preloading libraries
2023-12-10 09:58:28,196:INFO:Set up data.
2023-12-10 09:58:28,196:INFO:Set up index.
2023-12-10 09:58:28,697:INFO:Initializing predict_model()
2023-12-10 09:58:28,697:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000029F87C84AC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029F8AE34790>)
2023-12-10 09:58:28,697:INFO:Checking exceptions
2023-12-10 09:58:28,697:INFO:Preloading libraries
2023-12-10 09:58:28,697:INFO:Set up data.
2023-12-10 09:58:28,713:INFO:Set up index.
2023-12-10 10:02:29,258:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:02:29,258:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:02:29,258:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:02:29,258:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:02:29,439:INFO:Initializing load_model()
2023-12-10 10:02:29,439:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 10:02:29,607:INFO:Initializing load_model()
2023-12-10 10:02:29,607:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 10:02:29,679:INFO:Initializing load_model()
2023-12-10 10:02:29,695:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 10:02:52,406:INFO:Initializing predict_model()
2023-12-10 10:02:52,407:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002116F2F2670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002116F2F3310>)
2023-12-10 10:02:52,409:INFO:Checking exceptions
2023-12-10 10:02:52,409:INFO:Preloading libraries
2023-12-10 10:02:52,409:INFO:Set up data.
2023-12-10 10:02:52,425:INFO:Set up index.
2023-12-10 10:02:52,917:INFO:Initializing predict_model()
2023-12-10 10:02:52,917:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002116DDB2850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000211674D5790>)
2023-12-10 10:02:52,917:INFO:Checking exceptions
2023-12-10 10:02:52,917:INFO:Preloading libraries
2023-12-10 10:02:52,917:INFO:Set up data.
2023-12-10 10:02:52,932:INFO:Set up index.
2023-12-10 10:02:53,393:INFO:Initializing predict_model()
2023-12-10 10:02:53,393:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021164323520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000211674D5790>)
2023-12-10 10:02:53,393:INFO:Checking exceptions
2023-12-10 10:02:53,393:INFO:Preloading libraries
2023-12-10 10:02:53,393:INFO:Set up data.
2023-12-10 10:02:53,412:INFO:Set up index.
2023-12-10 10:03:16,940:INFO:Initializing predict_model()
2023-12-10 10:03:16,940:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002116F2F2820>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002116F3C6EE0>)
2023-12-10 10:03:16,940:INFO:Checking exceptions
2023-12-10 10:03:16,940:INFO:Preloading libraries
2023-12-10 10:03:16,940:INFO:Set up data.
2023-12-10 10:03:16,956:INFO:Set up index.
2023-12-10 10:03:17,459:INFO:Initializing predict_model()
2023-12-10 10:03:17,459:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002116F35CB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000211674D5790>)
2023-12-10 10:03:17,459:INFO:Checking exceptions
2023-12-10 10:03:17,459:INFO:Preloading libraries
2023-12-10 10:03:17,459:INFO:Set up data.
2023-12-10 10:03:17,470:INFO:Set up index.
2023-12-10 10:03:17,950:INFO:Initializing predict_model()
2023-12-10 10:03:17,950:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021164323520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000211674D5790>)
2023-12-10 10:03:17,950:INFO:Checking exceptions
2023-12-10 10:03:17,950:INFO:Preloading libraries
2023-12-10 10:03:17,950:INFO:Set up data.
2023-12-10 10:03:17,966:INFO:Set up index.
2023-12-10 10:03:52,872:INFO:Initializing predict_model()
2023-12-10 10:03:52,872:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002116F35CA00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002116F3C6550>)
2023-12-10 10:03:52,872:INFO:Checking exceptions
2023-12-10 10:03:52,872:INFO:Preloading libraries
2023-12-10 10:03:52,872:INFO:Set up data.
2023-12-10 10:03:52,895:INFO:Set up index.
2023-12-10 10:03:53,203:INFO:Initializing predict_model()
2023-12-10 10:03:53,203:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002116F36C1F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000211674D5790>)
2023-12-10 10:03:53,203:INFO:Checking exceptions
2023-12-10 10:03:53,203:INFO:Preloading libraries
2023-12-10 10:03:53,203:INFO:Set up data.
2023-12-10 10:03:53,203:INFO:Set up index.
2023-12-10 10:03:53,553:INFO:Initializing predict_model()
2023-12-10 10:03:53,553:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002116F35C9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000211674D5790>)
2023-12-10 10:03:53,553:INFO:Checking exceptions
2023-12-10 10:03:53,553:INFO:Preloading libraries
2023-12-10 10:03:53,553:INFO:Set up data.
2023-12-10 10:03:53,554:INFO:Set up index.
2023-12-10 10:03:53,878:INFO:Initializing predict_model()
2023-12-10 10:03:53,878:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002116788E850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000211674D5790>)
2023-12-10 10:03:53,878:INFO:Checking exceptions
2023-12-10 10:03:53,878:INFO:Preloading libraries
2023-12-10 10:03:53,878:INFO:Set up data.
2023-12-10 10:03:53,889:INFO:Set up index.
2023-12-10 10:04:09,844:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:04:09,844:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:04:09,844:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:04:09,844:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:04:10,203:INFO:Initializing load_model()
2023-12-10 10:04:10,203:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 10:04:10,333:INFO:Initializing load_model()
2023-12-10 10:04:10,333:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 10:04:10,417:INFO:Initializing load_model()
2023-12-10 10:04:10,417:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 10:04:23,568:INFO:Initializing predict_model()
2023-12-10 10:04:23,568:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A3742670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E3A3743310>)
2023-12-10 10:04:23,568:INFO:Checking exceptions
2023-12-10 10:04:23,568:INFO:Preloading libraries
2023-12-10 10:04:23,569:INFO:Set up data.
2023-12-10 10:04:23,581:INFO:Set up index.
2023-12-10 10:04:23,901:INFO:Initializing predict_model()
2023-12-10 10:04:23,901:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A21E2850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E39B904790>)
2023-12-10 10:04:23,901:INFO:Checking exceptions
2023-12-10 10:04:23,901:INFO:Preloading libraries
2023-12-10 10:04:23,901:INFO:Set up data.
2023-12-10 10:04:23,918:INFO:Set up index.
2023-12-10 10:04:24,239:INFO:Initializing predict_model()
2023-12-10 10:04:24,240:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E398754520>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E39B904790>)
2023-12-10 10:04:24,240:INFO:Checking exceptions
2023-12-10 10:04:24,240:INFO:Preloading libraries
2023-12-10 10:04:24,240:INFO:Set up data.
2023-12-10 10:04:24,249:INFO:Set up index.
2023-12-10 10:04:24,551:INFO:Initializing predict_model()
2023-12-10 10:04:24,551:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E398754AC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E39B904790>)
2023-12-10 10:04:24,551:INFO:Checking exceptions
2023-12-10 10:04:24,551:INFO:Preloading libraries
2023-12-10 10:04:24,551:INFO:Set up data.
2023-12-10 10:04:24,569:INFO:Set up index.
2023-12-10 10:04:55,386:INFO:Initializing predict_model()
2023-12-10 10:04:55,386:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A3742EE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E3A3826D30>)
2023-12-10 10:04:55,386:INFO:Checking exceptions
2023-12-10 10:04:55,386:INFO:Preloading libraries
2023-12-10 10:04:55,393:INFO:Set up data.
2023-12-10 10:04:55,407:INFO:Set up index.
2023-12-10 10:04:55,835:INFO:Initializing predict_model()
2023-12-10 10:04:55,836:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A37B4B80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E3A3826700>)
2023-12-10 10:04:55,836:INFO:Checking exceptions
2023-12-10 10:04:55,836:INFO:Preloading libraries
2023-12-10 10:04:55,836:INFO:Set up data.
2023-12-10 10:04:55,836:INFO:Set up index.
2023-12-10 10:04:56,123:INFO:Initializing predict_model()
2023-12-10 10:04:56,123:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A37CC8B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E39B904790>)
2023-12-10 10:04:56,123:INFO:Checking exceptions
2023-12-10 10:04:56,123:INFO:Preloading libraries
2023-12-10 10:04:56,123:INFO:Set up data.
2023-12-10 10:04:56,148:INFO:Set up index.
2023-12-10 10:04:56,437:INFO:Initializing predict_model()
2023-12-10 10:04:56,437:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A3742880>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E3A3826B80>)
2023-12-10 10:04:56,437:INFO:Checking exceptions
2023-12-10 10:04:56,437:INFO:Preloading libraries
2023-12-10 10:04:56,437:INFO:Set up data.
2023-12-10 10:04:56,453:INFO:Set up index.
2023-12-10 10:06:56,743:INFO:Initializing predict_model()
2023-12-10 10:06:56,744:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A3847970>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E3A38268B0>)
2023-12-10 10:06:56,745:INFO:Checking exceptions
2023-12-10 10:06:56,745:INFO:Preloading libraries
2023-12-10 10:06:56,745:INFO:Set up data.
2023-12-10 10:06:56,759:INFO:Set up index.
2023-12-10 10:06:57,060:INFO:Initializing predict_model()
2023-12-10 10:06:57,060:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A37CCEB0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E39B904790>)
2023-12-10 10:06:57,060:INFO:Checking exceptions
2023-12-10 10:06:57,060:INFO:Preloading libraries
2023-12-10 10:06:57,060:INFO:Set up data.
2023-12-10 10:06:57,076:INFO:Set up index.
2023-12-10 10:06:57,398:INFO:Initializing predict_model()
2023-12-10 10:06:57,398:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A37660A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E39B904790>)
2023-12-10 10:06:57,398:INFO:Checking exceptions
2023-12-10 10:06:57,398:INFO:Preloading libraries
2023-12-10 10:06:57,398:INFO:Set up data.
2023-12-10 10:06:57,414:INFO:Set up index.
2023-12-10 10:06:57,735:INFO:Initializing predict_model()
2023-12-10 10:06:57,735:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A21E2A60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E39B904790>)
2023-12-10 10:06:57,735:INFO:Checking exceptions
2023-12-10 10:06:57,735:INFO:Preloading libraries
2023-12-10 10:06:57,735:INFO:Set up data.
2023-12-10 10:06:57,735:INFO:Set up index.
2023-12-10 10:06:58,135:INFO:Initializing predict_model()
2023-12-10 10:06:58,135:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E398722970>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E39B904790>)
2023-12-10 10:06:58,135:INFO:Checking exceptions
2023-12-10 10:06:58,136:INFO:Preloading libraries
2023-12-10 10:06:58,136:INFO:Set up data.
2023-12-10 10:06:58,136:INFO:Set up index.
2023-12-10 10:07:02,261:INFO:Initializing predict_model()
2023-12-10 10:07:02,261:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A38476A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E3A3826940>)
2023-12-10 10:07:02,261:INFO:Checking exceptions
2023-12-10 10:07:02,261:INFO:Preloading libraries
2023-12-10 10:07:02,261:INFO:Set up data.
2023-12-10 10:07:02,261:INFO:Set up index.
2023-12-10 10:07:02,538:INFO:Initializing predict_model()
2023-12-10 10:07:02,538:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A37B48B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E3A3826DC0>)
2023-12-10 10:07:02,538:INFO:Checking exceptions
2023-12-10 10:07:02,538:INFO:Preloading libraries
2023-12-10 10:07:02,538:INFO:Set up data.
2023-12-10 10:07:02,538:INFO:Set up index.
2023-12-10 10:07:02,771:INFO:Initializing predict_model()
2023-12-10 10:07:02,771:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A37CC3A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E39B904790>)
2023-12-10 10:07:02,771:INFO:Checking exceptions
2023-12-10 10:07:02,771:INFO:Preloading libraries
2023-12-10 10:07:02,771:INFO:Set up data.
2023-12-10 10:07:02,798:INFO:Set up index.
2023-12-10 10:07:03,024:INFO:Initializing predict_model()
2023-12-10 10:07:03,025:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E398722970>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E3A3826AF0>)
2023-12-10 10:07:03,025:INFO:Checking exceptions
2023-12-10 10:07:03,025:INFO:Preloading libraries
2023-12-10 10:07:03,025:INFO:Set up data.
2023-12-10 10:07:03,030:INFO:Set up index.
2023-12-10 10:07:03,235:INFO:Initializing predict_model()
2023-12-10 10:07:03,235:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001E3A21E2850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E39B904790>)
2023-12-10 10:07:03,235:INFO:Checking exceptions
2023-12-10 10:07:03,235:INFO:Preloading libraries
2023-12-10 10:07:03,251:INFO:Set up data.
2023-12-10 10:07:03,251:INFO:Set up index.
2023-12-10 10:07:15,442:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:07:15,442:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:07:15,442:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:07:15,442:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:07:15,613:INFO:Initializing load_model()
2023-12-10 10:07:15,613:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 10:07:15,675:INFO:Initializing load_model()
2023-12-10 10:07:15,675:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 10:07:15,706:INFO:Initializing load_model()
2023-12-10 10:07:15,706:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 10:07:26,447:INFO:Initializing predict_model()
2023-12-10 10:07:26,447:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454ED53670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001454ED54310>)
2023-12-10 10:07:26,447:INFO:Checking exceptions
2023-12-10 10:07:26,447:INFO:Preloading libraries
2023-12-10 10:07:26,447:INFO:Set up data.
2023-12-10 10:07:26,447:INFO:Set up index.
2023-12-10 10:07:26,714:INFO:Initializing predict_model()
2023-12-10 10:07:26,714:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454D8226D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:26,714:INFO:Checking exceptions
2023-12-10 10:07:26,714:INFO:Preloading libraries
2023-12-10 10:07:26,714:INFO:Set up data.
2023-12-10 10:07:26,714:INFO:Set up index.
2023-12-10 10:07:26,941:INFO:Initializing predict_model()
2023-12-10 10:07:26,941:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454DFCE160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:26,941:INFO:Checking exceptions
2023-12-10 10:07:26,941:INFO:Preloading libraries
2023-12-10 10:07:26,941:INFO:Set up data.
2023-12-10 10:07:26,957:INFO:Set up index.
2023-12-10 10:07:27,201:INFO:Initializing predict_model()
2023-12-10 10:07:27,201:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000014543D9F2B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:27,201:INFO:Checking exceptions
2023-12-10 10:07:27,201:INFO:Preloading libraries
2023-12-10 10:07:27,201:INFO:Set up data.
2023-12-10 10:07:27,208:INFO:Set up index.
2023-12-10 10:07:27,453:INFO:Initializing predict_model()
2023-12-10 10:07:27,453:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000014543D939D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:27,453:INFO:Checking exceptions
2023-12-10 10:07:27,454:INFO:Preloading libraries
2023-12-10 10:07:27,454:INFO:Set up data.
2023-12-10 10:07:27,460:INFO:Set up index.
2023-12-10 10:07:31,292:INFO:Initializing predict_model()
2023-12-10 10:07:31,293:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454EDBA430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001454EE27B80>)
2023-12-10 10:07:31,293:INFO:Checking exceptions
2023-12-10 10:07:31,293:INFO:Preloading libraries
2023-12-10 10:07:31,293:INFO:Set up data.
2023-12-10 10:07:31,295:INFO:Set up index.
2023-12-10 10:07:31,552:INFO:Initializing predict_model()
2023-12-10 10:07:31,552:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454ED53370>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:31,552:INFO:Checking exceptions
2023-12-10 10:07:31,552:INFO:Preloading libraries
2023-12-10 10:07:31,567:INFO:Set up data.
2023-12-10 10:07:31,567:INFO:Set up index.
2023-12-10 10:07:31,804:INFO:Initializing predict_model()
2023-12-10 10:07:31,804:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454D822850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:31,804:INFO:Checking exceptions
2023-12-10 10:07:31,804:INFO:Preloading libraries
2023-12-10 10:07:31,805:INFO:Set up data.
2023-12-10 10:07:31,810:INFO:Set up index.
2023-12-10 10:07:32,036:INFO:Initializing predict_model()
2023-12-10 10:07:32,036:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454D822850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:32,036:INFO:Checking exceptions
2023-12-10 10:07:32,036:INFO:Preloading libraries
2023-12-10 10:07:32,036:INFO:Set up data.
2023-12-10 10:07:32,036:INFO:Set up index.
2023-12-10 10:07:32,268:INFO:Initializing predict_model()
2023-12-10 10:07:32,268:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454D822850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:32,268:INFO:Checking exceptions
2023-12-10 10:07:32,268:INFO:Preloading libraries
2023-12-10 10:07:32,268:INFO:Set up data.
2023-12-10 10:07:32,268:INFO:Set up index.
2023-12-10 10:07:45,418:INFO:Initializing predict_model()
2023-12-10 10:07:45,418:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454ED53640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001454EE27E50>)
2023-12-10 10:07:45,418:INFO:Checking exceptions
2023-12-10 10:07:45,418:INFO:Preloading libraries
2023-12-10 10:07:45,418:INFO:Set up data.
2023-12-10 10:07:45,439:INFO:Set up index.
2023-12-10 10:07:45,697:INFO:Initializing predict_model()
2023-12-10 10:07:45,697:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454EDCD6A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:45,697:INFO:Checking exceptions
2023-12-10 10:07:45,697:INFO:Preloading libraries
2023-12-10 10:07:45,697:INFO:Set up data.
2023-12-10 10:07:45,697:INFO:Set up index.
2023-12-10 10:07:45,943:INFO:Initializing predict_model()
2023-12-10 10:07:45,943:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454EDCDEB0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:45,943:INFO:Checking exceptions
2023-12-10 10:07:45,943:INFO:Preloading libraries
2023-12-10 10:07:45,943:INFO:Set up data.
2023-12-10 10:07:45,943:INFO:Set up index.
2023-12-10 10:07:46,184:INFO:Initializing predict_model()
2023-12-10 10:07:46,185:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454D8226D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:46,185:INFO:Checking exceptions
2023-12-10 10:07:46,185:INFO:Preloading libraries
2023-12-10 10:07:46,185:INFO:Set up data.
2023-12-10 10:07:46,190:INFO:Set up index.
2023-12-10 10:07:46,422:INFO:Initializing predict_model()
2023-12-10 10:07:46,422:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000014543D62A00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014546F44790>)
2023-12-10 10:07:46,423:INFO:Checking exceptions
2023-12-10 10:07:46,423:INFO:Preloading libraries
2023-12-10 10:07:46,423:INFO:Set up data.
2023-12-10 10:07:46,428:INFO:Set up index.
2023-12-10 10:07:50,354:INFO:Initializing predict_model()
2023-12-10 10:07:50,354:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454D822A60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001454EE27280>)
2023-12-10 10:07:50,354:INFO:Checking exceptions
2023-12-10 10:07:50,354:INFO:Preloading libraries
2023-12-10 10:07:50,354:INFO:Set up data.
2023-12-10 10:07:50,354:INFO:Set up index.
2023-12-10 10:08:02,302:INFO:Initializing predict_model()
2023-12-10 10:08:02,302:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001454E1EBFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001454EE278B0>)
2023-12-10 10:08:02,302:INFO:Checking exceptions
2023-12-10 10:08:02,302:INFO:Preloading libraries
2023-12-10 10:08:02,303:INFO:Set up data.
2023-12-10 10:08:02,304:INFO:Set up index.
2023-12-10 10:08:51,579:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:08:51,579:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:08:51,579:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:08:51,579:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:08:51,704:INFO:Initializing load_model()
2023-12-10 10:08:51,704:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 10:08:51,750:INFO:Initializing load_model()
2023-12-10 10:08:51,750:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 10:08:51,797:INFO:Initializing load_model()
2023-12-10 10:08:51,797:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 10:09:02,543:INFO:Initializing predict_model()
2023-12-10 10:09:02,543:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000154898F2670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000154898F3310>)
2023-12-10 10:09:02,543:INFO:Checking exceptions
2023-12-10 10:09:02,543:INFO:Preloading libraries
2023-12-10 10:09:02,543:INFO:Set up data.
2023-12-10 10:09:02,543:INFO:Set up index.
2023-12-10 10:09:02,824:INFO:Initializing predict_model()
2023-12-10 10:09:02,824:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000154883926D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:02,824:INFO:Checking exceptions
2023-12-10 10:09:02,824:INFO:Preloading libraries
2023-12-10 10:09:02,824:INFO:Set up data.
2023-12-10 10:09:02,824:INFO:Set up index.
2023-12-10 10:09:03,067:INFO:Initializing predict_model()
2023-12-10 10:09:03,067:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000015488B4E160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:03,067:INFO:Checking exceptions
2023-12-10 10:09:03,067:INFO:Preloading libraries
2023-12-10 10:09:03,067:INFO:Set up data.
2023-12-10 10:09:03,073:INFO:Set up index.
2023-12-10 10:09:03,321:INFO:Initializing predict_model()
2023-12-10 10:09:03,321:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000154FE7AE2B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:03,321:INFO:Checking exceptions
2023-12-10 10:09:03,321:INFO:Preloading libraries
2023-12-10 10:09:03,321:INFO:Set up data.
2023-12-10 10:09:03,328:INFO:Set up index.
2023-12-10 10:09:03,583:INFO:Initializing predict_model()
2023-12-10 10:09:03,583:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000154FE7A49D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:03,583:INFO:Checking exceptions
2023-12-10 10:09:03,583:INFO:Preloading libraries
2023-12-10 10:09:03,583:INFO:Set up data.
2023-12-10 10:09:03,589:INFO:Set up index.
2023-12-10 10:09:06,567:INFO:Initializing predict_model()
2023-12-10 10:09:06,567:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001548995A430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000154899C7B80>)
2023-12-10 10:09:06,567:INFO:Checking exceptions
2023-12-10 10:09:06,567:INFO:Preloading libraries
2023-12-10 10:09:06,567:INFO:Set up data.
2023-12-10 10:09:06,567:INFO:Set up index.
2023-12-10 10:09:06,842:INFO:Initializing predict_model()
2023-12-10 10:09:06,842:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000154898F21C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:06,842:INFO:Checking exceptions
2023-12-10 10:09:06,842:INFO:Preloading libraries
2023-12-10 10:09:06,842:INFO:Set up data.
2023-12-10 10:09:06,849:INFO:Set up index.
2023-12-10 10:09:07,091:INFO:Initializing predict_model()
2023-12-10 10:09:07,091:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000015488392850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:07,091:INFO:Checking exceptions
2023-12-10 10:09:07,091:INFO:Preloading libraries
2023-12-10 10:09:07,091:INFO:Set up data.
2023-12-10 10:09:07,097:INFO:Set up index.
2023-12-10 10:09:07,342:INFO:Initializing predict_model()
2023-12-10 10:09:07,342:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000015488392850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:07,342:INFO:Checking exceptions
2023-12-10 10:09:07,342:INFO:Preloading libraries
2023-12-10 10:09:07,342:INFO:Set up data.
2023-12-10 10:09:07,349:INFO:Set up index.
2023-12-10 10:09:07,585:INFO:Initializing predict_model()
2023-12-10 10:09:07,585:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000015488392850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:07,585:INFO:Checking exceptions
2023-12-10 10:09:07,585:INFO:Preloading libraries
2023-12-10 10:09:07,585:INFO:Set up data.
2023-12-10 10:09:07,590:INFO:Set up index.
2023-12-10 10:09:10,366:INFO:Initializing predict_model()
2023-12-10 10:09:10,366:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000015488B4E1F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000154899C7E50>)
2023-12-10 10:09:10,366:INFO:Checking exceptions
2023-12-10 10:09:10,366:INFO:Preloading libraries
2023-12-10 10:09:10,367:INFO:Set up data.
2023-12-10 10:09:10,374:INFO:Set up index.
2023-12-10 10:09:10,666:INFO:Initializing predict_model()
2023-12-10 10:09:10,666:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001548996D5E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:10,666:INFO:Checking exceptions
2023-12-10 10:09:10,666:INFO:Preloading libraries
2023-12-10 10:09:10,666:INFO:Set up data.
2023-12-10 10:09:10,672:INFO:Set up index.
2023-12-10 10:09:10,910:INFO:Initializing predict_model()
2023-12-10 10:09:10,910:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000154898F2610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:10,910:INFO:Checking exceptions
2023-12-10 10:09:10,910:INFO:Preloading libraries
2023-12-10 10:09:10,911:INFO:Set up data.
2023-12-10 10:09:10,916:INFO:Set up index.
2023-12-10 10:09:11,176:INFO:Initializing predict_model()
2023-12-10 10:09:11,176:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000154883926D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:11,176:INFO:Checking exceptions
2023-12-10 10:09:11,176:INFO:Preloading libraries
2023-12-10 10:09:11,176:INFO:Set up data.
2023-12-10 10:09:11,182:INFO:Set up index.
2023-12-10 10:09:11,454:INFO:Initializing predict_model()
2023-12-10 10:09:11,454:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000015488392A60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015481964790>)
2023-12-10 10:09:11,454:INFO:Checking exceptions
2023-12-10 10:09:11,454:INFO:Preloading libraries
2023-12-10 10:09:11,454:INFO:Set up data.
2023-12-10 10:09:11,454:INFO:Set up index.
2023-12-10 10:09:13,688:INFO:Initializing predict_model()
2023-12-10 10:09:13,688:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000154FE7A49D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000154899C7280>)
2023-12-10 10:09:13,688:INFO:Checking exceptions
2023-12-10 10:09:13,688:INFO:Preloading libraries
2023-12-10 10:09:13,688:INFO:Set up data.
2023-12-10 10:09:13,704:INFO:Set up index.
2023-12-10 10:10:01,696:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:10:01,696:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:10:01,696:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:10:01,696:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:10:01,821:INFO:Initializing load_model()
2023-12-10 10:10:01,821:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 10:10:01,868:INFO:Initializing load_model()
2023-12-10 10:10:01,868:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 10:10:01,915:INFO:Initializing load_model()
2023-12-10 10:10:01,915:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 10:10:13,697:INFO:Initializing predict_model()
2023-12-10 10:10:13,697:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023868212670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023868213310>)
2023-12-10 10:10:13,697:INFO:Checking exceptions
2023-12-10 10:10:13,697:INFO:Preloading libraries
2023-12-10 10:10:13,697:INFO:Set up data.
2023-12-10 10:10:13,714:INFO:Set up index.
2023-12-10 10:10:13,962:INFO:Initializing predict_model()
2023-12-10 10:10:13,962:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023866CB26D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:13,962:INFO:Checking exceptions
2023-12-10 10:10:13,962:INFO:Preloading libraries
2023-12-10 10:10:13,962:INFO:Set up data.
2023-12-10 10:10:13,977:INFO:Set up index.
2023-12-10 10:10:14,220:INFO:Initializing predict_model()
2023-12-10 10:10:14,220:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002386746E160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:14,220:INFO:Checking exceptions
2023-12-10 10:10:14,220:INFO:Preloading libraries
2023-12-10 10:10:14,220:INFO:Set up data.
2023-12-10 10:10:14,226:INFO:Set up index.
2023-12-10 10:10:14,472:INFO:Initializing predict_model()
2023-12-10 10:10:14,472:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002385D22F2B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:14,472:INFO:Checking exceptions
2023-12-10 10:10:14,472:INFO:Preloading libraries
2023-12-10 10:10:14,472:INFO:Set up data.
2023-12-10 10:10:14,478:INFO:Set up index.
2023-12-10 10:10:14,719:INFO:Initializing predict_model()
2023-12-10 10:10:14,719:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002385D2239D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:14,719:INFO:Checking exceptions
2023-12-10 10:10:14,719:INFO:Preloading libraries
2023-12-10 10:10:14,719:INFO:Set up data.
2023-12-10 10:10:14,727:INFO:Set up index.
2023-12-10 10:10:18,425:INFO:Initializing predict_model()
2023-12-10 10:10:18,425:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002386827A430>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238682E7B80>)
2023-12-10 10:10:18,425:INFO:Checking exceptions
2023-12-10 10:10:18,425:INFO:Preloading libraries
2023-12-10 10:10:18,425:INFO:Set up data.
2023-12-10 10:10:18,437:INFO:Set up index.
2023-12-10 10:10:18,744:INFO:Initializing predict_model()
2023-12-10 10:10:18,744:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000238682121C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:18,745:INFO:Checking exceptions
2023-12-10 10:10:18,745:INFO:Preloading libraries
2023-12-10 10:10:18,745:INFO:Set up data.
2023-12-10 10:10:18,755:INFO:Set up index.
2023-12-10 10:10:19,073:INFO:Initializing predict_model()
2023-12-10 10:10:19,073:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023866CB2850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:19,073:INFO:Checking exceptions
2023-12-10 10:10:19,073:INFO:Preloading libraries
2023-12-10 10:10:19,073:INFO:Set up data.
2023-12-10 10:10:19,078:INFO:Set up index.
2023-12-10 10:10:19,350:INFO:Initializing predict_model()
2023-12-10 10:10:19,350:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023866CB2850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:19,350:INFO:Checking exceptions
2023-12-10 10:10:19,350:INFO:Preloading libraries
2023-12-10 10:10:19,350:INFO:Set up data.
2023-12-10 10:10:19,365:INFO:Set up index.
2023-12-10 10:10:19,680:INFO:Initializing predict_model()
2023-12-10 10:10:19,680:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023866CB2850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:19,680:INFO:Checking exceptions
2023-12-10 10:10:19,680:INFO:Preloading libraries
2023-12-10 10:10:19,681:INFO:Set up data.
2023-12-10 10:10:19,691:INFO:Set up index.
2023-12-10 10:10:22,523:INFO:Initializing predict_model()
2023-12-10 10:10:22,523:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002386746E1F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238682E7E50>)
2023-12-10 10:10:22,523:INFO:Checking exceptions
2023-12-10 10:10:22,523:INFO:Preloading libraries
2023-12-10 10:10:22,523:INFO:Set up data.
2023-12-10 10:10:22,523:INFO:Set up index.
2023-12-10 10:10:22,791:INFO:Initializing predict_model()
2023-12-10 10:10:22,791:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002386828D5E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:22,791:INFO:Checking exceptions
2023-12-10 10:10:22,791:INFO:Preloading libraries
2023-12-10 10:10:22,791:INFO:Set up data.
2023-12-10 10:10:22,807:INFO:Set up index.
2023-12-10 10:10:23,042:INFO:Initializing predict_model()
2023-12-10 10:10:23,043:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023868212100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:23,043:INFO:Checking exceptions
2023-12-10 10:10:23,043:INFO:Preloading libraries
2023-12-10 10:10:23,043:INFO:Set up data.
2023-12-10 10:10:23,049:INFO:Set up index.
2023-12-10 10:10:23,291:INFO:Initializing predict_model()
2023-12-10 10:10:23,291:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023866CB26D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:23,291:INFO:Checking exceptions
2023-12-10 10:10:23,291:INFO:Preloading libraries
2023-12-10 10:10:23,292:INFO:Set up data.
2023-12-10 10:10:23,293:INFO:Set up index.
2023-12-10 10:10:23,542:INFO:Initializing predict_model()
2023-12-10 10:10:23,542:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000023866CB2A60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238603D4790>)
2023-12-10 10:10:23,542:INFO:Checking exceptions
2023-12-10 10:10:23,542:INFO:Preloading libraries
2023-12-10 10:10:23,542:INFO:Set up data.
2023-12-10 10:10:23,559:INFO:Set up index.
2023-12-10 10:10:27,445:INFO:Initializing predict_model()
2023-12-10 10:10:27,445:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002385D2239D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238682E7280>)
2023-12-10 10:10:27,445:INFO:Checking exceptions
2023-12-10 10:10:27,445:INFO:Preloading libraries
2023-12-10 10:10:27,445:INFO:Set up data.
2023-12-10 10:10:27,445:INFO:Set up index.
2023-12-10 10:12:29,601:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:12:29,617:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:12:29,617:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:12:29,617:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:12:29,804:INFO:Initializing load_model()
2023-12-10 10:12:29,804:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 10:12:29,883:INFO:Initializing load_model()
2023-12-10 10:12:29,883:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 10:12:29,914:INFO:Initializing load_model()
2023-12-10 10:12:29,929:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 10:12:40,769:INFO:Initializing predict_model()
2023-12-10 10:12:40,769:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD27E3670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDD27E4310>)
2023-12-10 10:12:40,769:INFO:Checking exceptions
2023-12-10 10:12:40,769:INFO:Preloading libraries
2023-12-10 10:12:40,769:INFO:Set up data.
2023-12-10 10:12:40,780:INFO:Set up index.
2023-12-10 10:12:41,062:INFO:Initializing predict_model()
2023-12-10 10:12:41,062:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD12826D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:12:41,062:INFO:Checking exceptions
2023-12-10 10:12:41,062:INFO:Preloading libraries
2023-12-10 10:12:41,062:INFO:Set up data.
2023-12-10 10:12:41,068:INFO:Set up index.
2023-12-10 10:12:41,307:INFO:Initializing predict_model()
2023-12-10 10:12:41,307:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD1A4E160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:12:41,307:INFO:Checking exceptions
2023-12-10 10:12:41,307:INFO:Preloading libraries
2023-12-10 10:12:41,307:INFO:Set up data.
2023-12-10 10:12:41,314:INFO:Set up index.
2023-12-10 10:12:41,562:INFO:Initializing predict_model()
2023-12-10 10:12:41,562:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDC77FF2B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:12:41,562:INFO:Checking exceptions
2023-12-10 10:12:41,562:INFO:Preloading libraries
2023-12-10 10:12:41,562:INFO:Set up data.
2023-12-10 10:12:41,568:INFO:Set up index.
2023-12-10 10:12:44,325:INFO:Initializing predict_model()
2023-12-10 10:12:44,325:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD2845190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDD28B7D30>)
2023-12-10 10:12:44,325:INFO:Checking exceptions
2023-12-10 10:12:44,325:INFO:Preloading libraries
2023-12-10 10:12:44,325:INFO:Set up data.
2023-12-10 10:12:44,341:INFO:Set up index.
2023-12-10 10:12:44,618:INFO:Initializing predict_model()
2023-12-10 10:12:44,618:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD284A8E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:12:44,618:INFO:Checking exceptions
2023-12-10 10:12:44,618:INFO:Preloading libraries
2023-12-10 10:12:44,618:INFO:Set up data.
2023-12-10 10:12:44,624:INFO:Set up index.
2023-12-10 10:12:44,872:INFO:Initializing predict_model()
2023-12-10 10:12:44,872:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD284A6A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:12:44,872:INFO:Checking exceptions
2023-12-10 10:12:44,872:INFO:Preloading libraries
2023-12-10 10:12:44,872:INFO:Set up data.
2023-12-10 10:12:44,878:INFO:Set up index.
2023-12-10 10:12:45,098:INFO:Initializing predict_model()
2023-12-10 10:12:45,098:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD12826D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:12:45,098:INFO:Checking exceptions
2023-12-10 10:12:45,098:INFO:Preloading libraries
2023-12-10 10:12:45,098:INFO:Set up data.
2023-12-10 10:12:45,114:INFO:Set up index.
2023-12-10 10:12:47,312:INFO:Initializing predict_model()
2023-12-10 10:12:47,312:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD284A850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDD28B7D30>)
2023-12-10 10:12:47,312:INFO:Checking exceptions
2023-12-10 10:12:47,312:INFO:Preloading libraries
2023-12-10 10:12:47,313:INFO:Set up data.
2023-12-10 10:12:47,318:INFO:Set up index.
2023-12-10 10:12:47,594:INFO:Initializing predict_model()
2023-12-10 10:12:47,594:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD27E35B0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:12:47,594:INFO:Checking exceptions
2023-12-10 10:12:47,594:INFO:Preloading libraries
2023-12-10 10:12:47,594:INFO:Set up data.
2023-12-10 10:12:47,601:INFO:Set up index.
2023-12-10 10:12:47,854:INFO:Initializing predict_model()
2023-12-10 10:12:47,854:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD285D2E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:12:47,854:INFO:Checking exceptions
2023-12-10 10:12:47,854:INFO:Preloading libraries
2023-12-10 10:12:47,855:INFO:Set up data.
2023-12-10 10:12:47,860:INFO:Set up index.
2023-12-10 10:12:48,101:INFO:Initializing predict_model()
2023-12-10 10:12:48,101:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD1282850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:12:48,101:INFO:Checking exceptions
2023-12-10 10:12:48,101:INFO:Preloading libraries
2023-12-10 10:12:48,101:INFO:Set up data.
2023-12-10 10:12:48,101:INFO:Set up index.
2023-12-10 10:12:50,484:INFO:Initializing predict_model()
2023-12-10 10:12:50,484:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDC77C2B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDD28B7D30>)
2023-12-10 10:12:50,484:INFO:Checking exceptions
2023-12-10 10:12:50,484:INFO:Preloading libraries
2023-12-10 10:12:50,484:INFO:Set up data.
2023-12-10 10:12:50,487:INFO:Set up index.
2023-12-10 10:13:14,166:INFO:Initializing predict_model()
2023-12-10 10:13:14,166:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDC77C2910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDD28B75E0>)
2023-12-10 10:13:14,166:INFO:Checking exceptions
2023-12-10 10:13:14,166:INFO:Preloading libraries
2023-12-10 10:13:14,166:INFO:Set up data.
2023-12-10 10:13:14,177:INFO:Set up index.
2023-12-10 10:13:52,495:INFO:Initializing predict_model()
2023-12-10 10:13:52,496:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD2845820>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDD28B7D30>)
2023-12-10 10:13:52,496:INFO:Checking exceptions
2023-12-10 10:13:52,496:INFO:Preloading libraries
2023-12-10 10:13:52,496:INFO:Set up data.
2023-12-10 10:13:52,499:INFO:Set up index.
2023-12-10 10:13:52,749:INFO:Initializing predict_model()
2023-12-10 10:13:52,749:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD284A400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:13:52,749:INFO:Checking exceptions
2023-12-10 10:13:52,749:INFO:Preloading libraries
2023-12-10 10:13:52,749:INFO:Set up data.
2023-12-10 10:13:52,764:INFO:Set up index.
2023-12-10 10:15:31,331:INFO:Initializing predict_model()
2023-12-10 10:15:31,331:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD2845880>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDD28B7AF0>)
2023-12-10 10:15:31,331:INFO:Checking exceptions
2023-12-10 10:15:31,331:INFO:Preloading libraries
2023-12-10 10:15:31,331:INFO:Set up data.
2023-12-10 10:15:31,353:INFO:Set up index.
2023-12-10 10:15:31,620:INFO:Initializing predict_model()
2023-12-10 10:15:31,620:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD284AD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:15:31,620:INFO:Checking exceptions
2023-12-10 10:15:31,620:INFO:Preloading libraries
2023-12-10 10:15:31,620:INFO:Set up data.
2023-12-10 10:15:31,627:INFO:Set up index.
2023-12-10 10:15:31,864:INFO:Initializing predict_model()
2023-12-10 10:15:31,864:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD27E3190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:15:31,864:INFO:Checking exceptions
2023-12-10 10:15:31,864:INFO:Preloading libraries
2023-12-10 10:15:31,864:INFO:Set up data.
2023-12-10 10:15:31,864:INFO:Set up index.
2023-12-10 10:16:57,490:INFO:Initializing predict_model()
2023-12-10 10:16:57,490:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD285D790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDD28B7A60>)
2023-12-10 10:16:57,490:INFO:Checking exceptions
2023-12-10 10:16:57,490:INFO:Preloading libraries
2023-12-10 10:16:57,490:INFO:Set up data.
2023-12-10 10:16:57,497:INFO:Set up index.
2023-12-10 10:16:57,763:INFO:Initializing predict_model()
2023-12-10 10:16:57,763:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD2845D00>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:16:57,763:INFO:Checking exceptions
2023-12-10 10:16:57,763:INFO:Preloading libraries
2023-12-10 10:16:57,763:INFO:Set up data.
2023-12-10 10:16:57,784:INFO:Set up index.
2023-12-10 10:16:58,060:INFO:Initializing predict_model()
2023-12-10 10:16:58,060:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD1A4E1F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:16:58,060:INFO:Checking exceptions
2023-12-10 10:16:58,060:INFO:Preloading libraries
2023-12-10 10:16:58,061:INFO:Set up data.
2023-12-10 10:16:58,067:INFO:Set up index.
2023-12-10 10:16:58,300:INFO:Initializing predict_model()
2023-12-10 10:16:58,300:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD27E3D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:16:58,300:INFO:Checking exceptions
2023-12-10 10:16:58,300:INFO:Preloading libraries
2023-12-10 10:16:58,300:INFO:Set up data.
2023-12-10 10:16:58,300:INFO:Set up index.
2023-12-10 10:17:14,306:INFO:Initializing predict_model()
2023-12-10 10:17:14,306:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD27E3AC0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDD28B7A60>)
2023-12-10 10:17:14,306:INFO:Checking exceptions
2023-12-10 10:17:14,306:INFO:Preloading libraries
2023-12-10 10:17:14,306:INFO:Set up data.
2023-12-10 10:17:14,312:INFO:Set up index.
2023-12-10 10:17:14,576:INFO:Initializing predict_model()
2023-12-10 10:17:14,576:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD285D880>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:17:14,576:INFO:Checking exceptions
2023-12-10 10:17:14,576:INFO:Preloading libraries
2023-12-10 10:17:14,576:INFO:Set up data.
2023-12-10 10:17:14,582:INFO:Set up index.
2023-12-10 10:17:14,808:INFO:Initializing predict_model()
2023-12-10 10:17:14,808:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CDD27E38E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CDCA9A4790>)
2023-12-10 10:17:14,808:INFO:Checking exceptions
2023-12-10 10:17:14,808:INFO:Preloading libraries
2023-12-10 10:17:14,808:INFO:Set up data.
2023-12-10 10:17:14,824:INFO:Set up index.
2023-12-10 10:17:48,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:17:48,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:17:48,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:17:48,871:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 10:17:48,996:INFO:Initializing load_model()
2023-12-10 10:17:48,996:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 10:17:49,042:INFO:Initializing load_model()
2023-12-10 10:17:49,042:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 10:17:49,089:INFO:Initializing load_model()
2023-12-10 10:17:49,089:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 10:18:00,847:INFO:Initializing predict_model()
2023-12-10 10:18:00,847:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FA08443670>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FA08444310>)
2023-12-10 10:18:00,847:INFO:Checking exceptions
2023-12-10 10:18:00,847:INFO:Preloading libraries
2023-12-10 10:18:00,847:INFO:Set up data.
2023-12-10 10:18:00,866:INFO:Set up index.
2023-12-10 10:18:01,208:INFO:Initializing predict_model()
2023-12-10 10:18:01,208:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FA06EE26D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FA7F395790>)
2023-12-10 10:18:01,208:INFO:Checking exceptions
2023-12-10 10:18:01,208:INFO:Preloading libraries
2023-12-10 10:18:01,208:INFO:Set up data.
2023-12-10 10:18:01,224:INFO:Set up index.
2023-12-10 10:18:01,498:INFO:Initializing predict_model()
2023-12-10 10:18:01,498:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FA0769E160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FA7F395790>)
2023-12-10 10:18:01,498:INFO:Checking exceptions
2023-12-10 10:18:01,498:INFO:Preloading libraries
2023-12-10 10:18:01,498:INFO:Set up data.
2023-12-10 10:18:01,514:INFO:Set up index.
2023-12-10 10:19:02,395:INFO:Initializing predict_model()
2023-12-10 10:19:02,395:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001FA084A6D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FA08517EE0>)
2023-12-10 10:19:02,396:INFO:Checking exceptions
2023-12-10 10:19:02,396:INFO:Preloading libraries
2023-12-10 10:19:02,396:INFO:Set up data.
2023-12-10 10:19:02,409:INFO:Set up index.
2023-12-10 11:07:12,888:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 11:07:12,888:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 11:07:12,888:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 11:07:12,888:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-10 11:07:13,091:INFO:Initializing load_model()
2023-12-10 11:07:13,091:INFO:load_model(model_name=../models/model_exp1, platform=None, authentication=None, verbose=True)
2023-12-10 11:07:13,154:INFO:Initializing load_model()
2023-12-10 11:07:13,154:INFO:load_model(model_name=../models/model_exp2, platform=None, authentication=None, verbose=True)
2023-12-10 11:07:13,201:INFO:Initializing load_model()
2023-12-10 11:07:13,201:INFO:load_model(model_name=../models/model_exp3, platform=None, authentication=None, verbose=True)
2023-12-10 11:07:23,621:INFO:Initializing predict_model()
2023-12-10 11:07:23,622:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A6759E7C0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A675A7160>)
2023-12-10 11:07:23,622:INFO:Checking exceptions
2023-12-10 11:07:23,622:INFO:Preloading libraries
2023-12-10 11:07:23,622:INFO:Set up data.
2023-12-10 11:07:23,622:INFO:Set up index.
2023-12-10 11:07:28,507:INFO:Initializing predict_model()
2023-12-10 11:07:28,507:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A6758D400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A5F755700>)
2023-12-10 11:07:28,507:INFO:Checking exceptions
2023-12-10 11:07:28,507:INFO:Preloading libraries
2023-12-10 11:07:28,507:INFO:Set up data.
2023-12-10 11:07:28,507:INFO:Set up index.
2023-12-10 11:07:31,593:INFO:Initializing predict_model()
2023-12-10 11:07:31,593:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A6757EB80>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A5F755790>)
2023-12-10 11:07:31,593:INFO:Checking exceptions
2023-12-10 11:07:31,593:INFO:Preloading libraries
2023-12-10 11:07:31,593:INFO:Set up data.
2023-12-10 11:07:31,593:INFO:Set up index.
2023-12-10 11:07:40,102:INFO:Initializing predict_model()
2023-12-10 11:07:40,102:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A6758D280>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67596F70>)
2023-12-10 11:07:40,102:INFO:Checking exceptions
2023-12-10 11:07:40,102:INFO:Preloading libraries
2023-12-10 11:07:40,102:INFO:Set up data.
2023-12-10 11:07:40,119:INFO:Set up index.
2023-12-10 11:07:40,386:INFO:Initializing predict_model()
2023-12-10 11:07:40,386:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A6757EEB0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67596F70>)
2023-12-10 11:07:40,386:INFO:Checking exceptions
2023-12-10 11:07:40,386:INFO:Preloading libraries
2023-12-10 11:07:40,386:INFO:Set up data.
2023-12-10 11:07:40,386:INFO:Set up index.
2023-12-10 11:07:44,715:INFO:Initializing predict_model()
2023-12-10 11:07:44,715:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A67587730>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67673DC0>)
2023-12-10 11:07:44,715:INFO:Checking exceptions
2023-12-10 11:07:44,715:INFO:Preloading libraries
2023-12-10 11:07:44,716:INFO:Set up data.
2023-12-10 11:07:44,717:INFO:Set up index.
2023-12-10 11:07:44,936:INFO:Initializing predict_model()
2023-12-10 11:07:44,936:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A6758DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67596F70>)
2023-12-10 11:07:44,936:INFO:Checking exceptions
2023-12-10 11:07:44,936:INFO:Preloading libraries
2023-12-10 11:07:44,937:INFO:Set up data.
2023-12-10 11:07:44,944:INFO:Set up index.
2023-12-10 11:07:49,044:INFO:Initializing predict_model()
2023-12-10 11:07:49,044:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A66A19B20>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67673B80>)
2023-12-10 11:07:49,044:INFO:Checking exceptions
2023-12-10 11:07:49,044:INFO:Preloading libraries
2023-12-10 11:07:49,044:INFO:Set up data.
2023-12-10 11:07:49,044:INFO:Set up index.
2023-12-10 11:07:49,261:INFO:Initializing predict_model()
2023-12-10 11:07:49,261:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A67587400>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67596F70>)
2023-12-10 11:07:49,261:INFO:Checking exceptions
2023-12-10 11:07:49,261:INFO:Preloading libraries
2023-12-10 11:07:49,261:INFO:Set up data.
2023-12-10 11:07:49,269:INFO:Set up index.
2023-12-10 11:07:49,451:INFO:Initializing predict_model()
2023-12-10 11:07:49,452:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A67571550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67596F70>)
2023-12-10 11:07:49,452:INFO:Checking exceptions
2023-12-10 11:07:49,452:INFO:Preloading libraries
2023-12-10 11:07:49,452:INFO:Set up data.
2023-12-10 11:07:49,457:INFO:Set up index.
2023-12-10 11:07:49,638:INFO:Initializing predict_model()
2023-12-10 11:07:49,638:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A675777F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67596F70>)
2023-12-10 11:07:49,638:INFO:Checking exceptions
2023-12-10 11:07:49,638:INFO:Preloading libraries
2023-12-10 11:07:49,638:INFO:Set up data.
2023-12-10 11:07:49,645:INFO:Set up index.
2023-12-10 11:07:56,262:INFO:Initializing predict_model()
2023-12-10 11:07:56,262:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A675779D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67673DC0>)
2023-12-10 11:07:56,262:INFO:Checking exceptions
2023-12-10 11:07:56,262:INFO:Preloading libraries
2023-12-10 11:07:56,262:INFO:Set up data.
2023-12-10 11:07:56,274:INFO:Set up index.
2023-12-10 11:08:13,410:INFO:Initializing predict_model()
2023-12-10 11:08:13,411:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A67571880>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67673B80>)
2023-12-10 11:08:13,411:INFO:Checking exceptions
2023-12-10 11:08:13,411:INFO:Preloading libraries
2023-12-10 11:08:13,411:INFO:Set up data.
2023-12-10 11:08:13,425:INFO:Set up index.
2023-12-10 11:08:17,539:INFO:Initializing predict_model()
2023-12-10 11:08:17,539:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A67587D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A676739D0>)
2023-12-10 11:08:17,539:INFO:Checking exceptions
2023-12-10 11:08:17,539:INFO:Preloading libraries
2023-12-10 11:08:17,539:INFO:Set up data.
2023-12-10 11:08:17,556:INFO:Set up index.
2023-12-10 11:08:26,158:INFO:Initializing predict_model()
2023-12-10 11:08:26,158:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A66A19550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 GradientBoostingClassifier(random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A67673160>)
2023-12-10 11:08:26,158:INFO:Checking exceptions
2023-12-10 11:08:26,158:INFO:Preloading libraries
2023-12-10 11:08:26,158:INFO:Set up data.
2023-12-10 11:08:26,165:INFO:Set up index.
2023-12-10 11:12:50,587:INFO:Initializing predict_model()
2023-12-10 11:12:50,587:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000025A67577730>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'fnlwgt', 'educational-num',
                                             'capital-gain', 'capital-loss',
                                             'hours-per-week'],
                                    transformer=KNNImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['workclass', 'educati...
                ('balance',
                 TransformerWrapper(transformer=FixImbalancer(estimator=ADASYN(random_state=2023)))),
                ('transformation',
                 TransformerWrapper(transformer=QuantileTransformer(output_distribution='normal',
                                                                    random_state=2023))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025A676731F0>)
2023-12-10 11:12:50,587:INFO:Checking exceptions
2023-12-10 11:12:50,587:INFO:Preloading libraries
2023-12-10 11:12:50,588:INFO:Set up data.
2023-12-10 11:12:50,602:INFO:Set up index.
